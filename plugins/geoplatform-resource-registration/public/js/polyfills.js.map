{"version":3,"sources":["/./src/polyfills.ts","/./node_modules/zone.js/dist/zone-evergreen.js"],"names":["__webpack_require__","r","__webpack_exports__","global","performance","mark","name","performanceMeasure","label","checkDuplicate","__symbol__","Error","Zone","[object Object]","parent","zoneSpec","this","_parent","_name","_properties","properties","_zoneDelegate","ZoneDelegate","patches","root","zone","current","_currentZoneFrame","currentTask","_currentTask","fn","hasOwnProperty","perfName","_api","key","getZoneWith","fork","callback","source","_callback","intercept","runGuarded","arguments","applyThis","applyArgs","invoke","error","handleError","task","NO_ZONE","state","notScheduled","type","eventTask","macroTask","reEntryGuard","running","_transitionTo","scheduled","runCount","previousTask","data","isPeriodic","cancelFn","undefined","invokeTask","unknown","_updateTaskCount","newZone","scheduling","zoneDelegates","_zoneDelegates","_zone","scheduleTask","err","customSchedule","ZoneTask","microTask","customCancel","canceling","cancelTask","count","i","length","DELEGATE_ZS","onHasTask","delegate","_","target","hasTaskState","hasTask","onScheduleTask","onInvokeTask","onCancelTask","parentDelegate","_taskCounts","_parentDelegate","_forkZS","onFork","_forkDlgt","_forkCurrZone","_interceptZS","onIntercept","_interceptDlgt","_interceptCurrZone","_invokeZS","onInvoke","_invokeDlgt","_invokeCurrZone","_handleErrorZS","onHandleError","_handleErrorDlgt","_handleErrorCurrZone","_scheduleTaskZS","_scheduleTaskDlgt","_scheduleTaskCurrZone","_invokeTaskZS","_invokeTaskDlgt","_invokeTaskCurrZone","_cancelTaskZS","_cancelTaskDlgt","_cancelTaskCurrZone","_hasTaskZS","_hasTaskDlgt","_hasTaskDlgtOwner","_hasTaskCurrZone","zoneSpecHasTask","parentHasTask","targetZone","apply","returnTask","push","scheduleFn","scheduleMicroTask","value","isEmpty","counts","prev","next","change","options","_state","self","useG","call","args","_numberOfNestedTaskFrames","runTask","drainMicroTaskQueue","toState","fromState1","fromState2","handleId","toString","Object","prototype","symbolSetTimeout","symbolPromise","symbolThen","nativeMicroTaskQueuePromise","_microTaskQueue","_isDrainingMicrotaskQueue","resolve","nativeThen","queue","onUnhandledError","microtaskDrainDone","symbol","currentZoneFrame","noop","showUncaughtError","patchEventTarget","patchOnProperties","patchMethod","bindArguments","patchThen","patchMacroTask","setNativePromise","NativePromise","patchEventPrototype","isIEOrEdge","getGlobalObjects","ObjectDefineProperty","ObjectGetOwnPropertyDescriptor","ObjectCreate","ArraySlice","patchClass","wrapWithCurrentZone","filterProperties","attachOriginToPatched","_redefineProperty","patchCallbacks","window","__load_patch","api","getOwnPropertyDescriptor","defineProperty","_uncaughtPromiseErrors","creationTrace","e","rejection","console","message","stack","uncaughtPromiseError","shift","handleUnhandledRejection","UNHANDLED_PROMISE_REJECTION_HANDLER_SYMBOL","handler","isThenable","then","forwardResolution","forwardRejection","ZoneAwarePromise","reject","symbolState","symbolValue","symbolFinally","symbolParentPromiseValue","symbolParentPromiseState","UNRESOLVED","RESOLVED","REJECTED","REJECTED_NO_CATCH","makeResolver","promise","v","resolvePromise","once","wasCalled","wrappedFunction","TYPE_ERROR","CURRENT_TASK_TRACE_SYMBOL","onceWrapper","TypeError","clearRejectedNoCatch","trace","configurable","enumerable","writable","scheduleResolveOrReject","obj","className","constructor","JSON","stringify","readableObjectToString","REJECTION_HANDLED_HANDLER","splice","chainPromise","onFulfilled","onRejected","promiseState","parentPromiseValue","isFinallyPromise","run","ZONE_AWARE_PROMISE_TO_STRING","executor","values","res","rej","onResolve","onReject","unresolvedCount","valueIndex","resolvedValues","curValueIndex","get","Symbol","toStringTag","onFinally","race","all","ZONE_AWARE_PROMISE","desc","set","NewNativePromise","symbolThenPatched","Ctor","proto","prop","originalThen","fetch","resultPromise","ctor","zoneify","Promise","ObjectGetPrototypeOf","getPrototypeOf","create","Array","slice","ADD_EVENT_LISTENER_STR","REMOVE_EVENT_LISTENER_STR","ZONE_SYMBOL_ADD_EVENT_LISTENER","ZONE_SYMBOL_REMOVE_EVENT_LISTENER","TRUE_STR","FALSE_STR","ZONE_SYMBOL_PREFIX","wrap","scheduleMacroTaskWithCurrentZone","scheduleMacroTask","zoneSymbol","isWindowExists","internalWindow","_global","REMOVE_ATTRIBUTE","NULL_ON_PROP_VALUE","isPropertyWritable","propertyDesc","isWebWorker","WorkerGlobalScope","isNode","process","isBrowser","isMix","zoneSymbolEventNames","wrapFn","event","eventNameSymbol","listener","result","errorEvent","filename","lineno","colno","preventDefault","patchProperty","onPropPatchedSymbol","originalDescGet","originalDescSet","eventName","substr","newValue","removeEventListener","addEventListener","removeAttribute","onProperties","j","originalInstanceKey","OriginalClass","a","instance","shouldCopySymbolProperties","patchFn","delegateName","patchDelegate","src","dest","getOwnPropertySymbols","forEach","copySymbolProperties","funcName","metaCreator","setNative","cbIdx","meta","patched","original","isDetectedIEOrEdge","ieOrEdge","ua","navigator","userAgent","indexOf","originalFunctionToString","Function","ORIGINAL_DELEGATE_SYMBOL","PROMISE_SYMBOL","ERROR_SYMBOL","newFunctionToString","originalDelegate","nativePromise","nativeError","originalObjectToString","passiveSupported","OPTIMIZED_ZONE_EVENT_TASK_DATA","zoneSymbolEventNames$1","globalSources","EVENT_NAME_SYMBOL_REGX","IMMEDIATE_PROPAGATION_SYMBOL","apis","patchOptions","ADD_EVENT_LISTENER","add","REMOVE_EVENT_LISTENER","rm","LISTENERS_EVENT_LISTENER","listeners","REMOVE_ALL_LISTENERS_EVENT_LISTENER","rmAll","zoneSymbolAddEventListener","ADD_EVENT_LISTENER_SOURCE","PREPEND_EVENT_LISTENER","PREPEND_EVENT_LISTENER_SOURCE","isRemoved","handleEvent","globalZoneAwareCallback","tasks","copyTasks","globalZoneAwareCaptureCallback","patchEventTargetMethods","useGlobalCallback","validateHandler","vh","chkDup","returnTarget","rt","eventNameToString","taskData","nativeAddEventListener","nativeRemoveEventListener","nativeListeners","nativeRemoveAllListeners","nativePrependEventListener","checkIsPassive","capture","prepend","customSchedulePrepend","isExisting","symbolEventNames","symbolEventName","existingTasks","allRemoved","compare","diff","typeOfDelegate","blackListedEvents","makeAddListener","nativeListener","addSource","customScheduleFn","customCancelFn","isHandleEvent","falseEventName","trueEventName","symbolCapture","constructorName","targetSource","scheduleEventTask","unshift","existingTask","findEventTasks","symbolCaptureEventName","captureTasks","removeTasks","keys","match","exec","evtName","results","foundTasks","Event","targetName","method","callbacks","nativeDelegate","opts","descriptor","zoneSymbol$1","_defineProperty","_getOwnPropertyDescriptor","_create","unconfigurablesKey","originalConfigurableFlag","_tryDefineProperty","rewriteDescriptor","isUnconfigurable","isFrozen","descJson","log","windowEventNames","mediaElementEventNames","frameEventNames","frameSetEventNames","marqueeEventNames","XMLHttpRequestEventNames","IDBIndexEventNames","websocketEventNames","workerEventNames","eventNames","concat","ignoreProperties","tip","filter","ip","targetIgnoreProperties","op","patchFilteredProperties","propertyDescriptorPatch","supportsWebSocket","WebSocket","ignoreErrorProperties","Document","Element","HTMLElement","HTMLMediaElement","HTMLFrameSetElement","HTMLBodyElement","HTMLFrameElement","HTMLIFrameElement","HTMLMarqueeElement","Worker","XMLHttpRequest","XMLHttpRequestEventTarget","IDBIndex","IDBRequest","IDBOpenDBRequest","IDBDatabase","IDBTransaction","IDBCursor","SYMBOL_BLACK_LISTED_EVENTS","SYMBOL_UNPATCHED_EVENTS","taskSymbol","patchTimer","setName","cancelName","nameSuffix","clearNative","tasksByHandleId","clearTask","delay","handle","ref","unref","bind","id","eventTargetPatch","EVENT_TARGET","legacyPatch","blockingMethods","s","patchEvent","defineProperties","props","customElements","patchCustomElements","XMLHttpRequestPrototype","oriAddListener","oriRemoveListener","XMLHttpRequestEventTargetPrototype","READY_STATE_CHANGE","SCHEDULED","XHR_SCHEDULED","XHR_ERROR_BEFORE_SCHEDULED","XHR_LISTENER","newListener","readyState","DONE","aborted","loadTasks","oriInvoke","storedTask","XHR_TASK","sendNative","placeholderCallback","abortNative","openNative","XHR_SYNC","XHR_URL","fetchTaskAborting","fetchTaskScheduling","url","patchXHR","geolocation","fnNames","patchPrototype","findPromiseRejectionHandler","PromiseRejectionEvent","evt","reason"],"mappings":"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ACA,mBACA,UACA,qBACA,SACA,gBACA,oBACA,wBACA,0BAOAC,GAAA,gFA6DAC,GAAA,SACAC,GAAA,iEACAC,GAAA,4BACAC,GAAA,CACA,6EACA,oBAEAC,GAAA,yFACAC,GAAA,mCACAC,GAAA,oBACAC,GApNA,CACA,QACA,kBACA,eACA,qBACA,WACA,cACA,OACA,SACA,UACA,iBACA,SACA,mBACA,oBACA,iBACA,YACA,QACA,QACA,cACA,aACA,WACA,OACA,UACA,YACA,WACA,YACA,WACA,OACA,iBACA,UACA,QACA,QACA,QACA,UACA,WACA,oBACA,QACA,UACA,UACA,WACA,QACA,OACA,YACA,aACA,iBACA,qBACA,YACA,aACA,aACA,YACA,WACA,YACA,UACA,aACA,oBACA,QACA,OACA,UACA,gBACA,cACA,eACA,eACA,oBACA,uBACA,4BACA,mBACA,sBACA,yBACA,cACA,WACA,cACA,YACA,WACA,aACA,QACA,SACA,SACA,SACA,UACA,SACA,kBACA,cACA,OACA,OACA,UACA,SACA,UACA,aACA,eACA,cACA,YACA,aACA,WACA,mBACA,gBACA,UACA,SAoHAC,OAbA,wEACA,qCACA,WAvGA,CACA,0FACA,sFACA,oFACA,6BA8GAV,GA5EA,CACA,kFACA,iFACA,yEAGA,CACA,WACA,cACA,cACA,iBACA,mBACA,kBACA,eACA,aACA,gBACA,gBACA,iBACA,kBACA,cACA,eACA,iBACA,cACA,OACA,UACA,YACA,iBACA,YACA,cACA,WACA,UACA,aACA,eACA,UACA,0BACA,aACA,OACA,gBACA,6BACA,kBACA,qBACA,eACA,gBACA,iBACA,eACA,sBACA,iBACA,uBACA,kBACA,gBACA,iBACA,iBACA,iBACA,gBACA,eACA,gBACA,cACA,aACA,gCACA,mBACA,OACA,kBAgBA,SAAA3R,GAAApG,EAAAyP,EAAAiJ,GACA,IAAAA,GAAA,IAAAA,EAAA/Y,OACA,OAAA8P,EAEA,MAAAkJ,EAAAD,EAAAE,OAAAC,KAAA7Y,YACA,IAAA2Y,GAAA,IAAAA,EAAAhZ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","file":"polyfills-es2015.js","sourcesContent":["\n\n\n/**\n * Required to support Web Animations `@angular/platform-browser/animations`.\n * Needed for: All but Chrome, Firefox and Opera. http://caniuse.com/#feat=web-animation\n **/\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n */\n\n // (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n // (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n // (window as any).__zone_symbol__BLACK_LISTED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n\n /*\n * in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n * with the following flag, it will bypass `zone.js` patch for IE/Edge\n */\n// (window as any).__Zone_enable_cross_context_check = true;\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n","/**\n* @license\n* Copyright Google Inc. All Rights Reserved.\n*\n* Use of this source code is governed by an MIT-style license that can be\n* found in the LICENSE file at https://angular.io/license\n*/\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst Zone$1 = (function (global) {\n    const performance = global['performance'];\n    function mark(name) {\n        performance && performance['mark'] && performance['mark'](name);\n    }\n    function performanceMeasure(name, label) {\n        performance && performance['measure'] && performance['measure'](name, label);\n    }\n    mark('Zone');\n    const checkDuplicate = global[('__zone_symbol__forceDuplicateZoneCheck')] === true;\n    if (global['Zone']) {\n        // if global['Zone'] already exists (maybe zone.js was already loaded or\n        // some other lib also registered a global object named Zone), we may need\n        // to throw an error, but sometimes user may not want this error.\n        // For example,\n        // we have two web pages, page1 includes zone.js, page2 doesn't.\n        // and the 1st time user load page1 and page2, everything work fine,\n        // but when user load page2 again, error occurs because global['Zone'] already exists.\n        // so we add a flag to let user choose whether to throw this error or not.\n        // By default, if existing Zone is from zone.js, we will not throw the error.\n        if (checkDuplicate || typeof global['Zone'].__symbol__ !== 'function') {\n            throw new Error('Zone already loaded.');\n        }\n        else {\n            return global['Zone'];\n        }\n    }\n    class Zone {\n        constructor(parent, zoneSpec) {\n            this._parent = parent;\n            this._name = zoneSpec ? zoneSpec.name || 'unnamed' : '<root>';\n            this._properties = zoneSpec && zoneSpec.properties || {};\n            this._zoneDelegate =\n                new ZoneDelegate(this, this._parent && this._parent._zoneDelegate, zoneSpec);\n        }\n        static assertZonePatched() {\n            if (global['Promise'] !== patches['ZoneAwarePromise']) {\n                throw new Error('Zone.js has detected that ZoneAwarePromise `(window|global).Promise` ' +\n                    'has been overwritten.\\n' +\n                    'Most likely cause is that a Promise polyfill has been loaded ' +\n                    'after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. ' +\n                    'If you must load one, do so before loading zone.js.)');\n            }\n        }\n        static get root() {\n            let zone = Zone.current;\n            while (zone.parent) {\n                zone = zone.parent;\n            }\n            return zone;\n        }\n        static get current() {\n            return _currentZoneFrame.zone;\n        }\n        static get currentTask() {\n            return _currentTask;\n        }\n        static __load_patch(name, fn) {\n            if (patches.hasOwnProperty(name)) {\n                if (checkDuplicate) {\n                    throw Error('Already loaded patch: ' + name);\n                }\n            }\n            else if (!global['__Zone_disable_' + name]) {\n                const perfName = 'Zone:' + name;\n                mark(perfName);\n                patches[name] = fn(global, Zone, _api);\n                performanceMeasure(perfName, perfName);\n            }\n        }\n        get parent() {\n            return this._parent;\n        }\n        get name() {\n            return this._name;\n        }\n        get(key) {\n            const zone = this.getZoneWith(key);\n            if (zone)\n                return zone._properties[key];\n        }\n        getZoneWith(key) {\n            let current = this;\n            while (current) {\n                if (current._properties.hasOwnProperty(key)) {\n                    return current;\n                }\n                current = current._parent;\n            }\n            return null;\n        }\n        fork(zoneSpec) {\n            if (!zoneSpec)\n                throw new Error('ZoneSpec required!');\n            return this._zoneDelegate.fork(this, zoneSpec);\n        }\n        wrap(callback, source) {\n            if (typeof callback !== 'function') {\n                throw new Error('Expecting function got: ' + callback);\n            }\n            const _callback = this._zoneDelegate.intercept(this, callback, source);\n            const zone = this;\n            return function () {\n                return zone.runGuarded(_callback, this, arguments, source);\n            };\n        }\n        run(callback, applyThis, applyArgs, source) {\n            _currentZoneFrame = { parent: _currentZoneFrame, zone: this };\n            try {\n                return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);\n            }\n            finally {\n                _currentZoneFrame = _currentZoneFrame.parent;\n            }\n        }\n        runGuarded(callback, applyThis = null, applyArgs, source) {\n            _currentZoneFrame = { parent: _currentZoneFrame, zone: this };\n            try {\n                try {\n                    return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);\n                }\n                catch (error) {\n                    if (this._zoneDelegate.handleError(this, error)) {\n                        throw error;\n                    }\n                }\n            }\n            finally {\n                _currentZoneFrame = _currentZoneFrame.parent;\n            }\n        }\n        runTask(task, applyThis, applyArgs) {\n            if (task.zone != this) {\n                throw new Error('A task can only be run in the zone of creation! (Creation: ' +\n                    (task.zone || NO_ZONE).name + '; Execution: ' + this.name + ')');\n            }\n            // https://github.com/angular/zone.js/issues/778, sometimes eventTask\n            // will run in notScheduled(canceled) state, we should not try to\n            // run such kind of task but just return\n            if (task.state === notScheduled && (task.type === eventTask || task.type === macroTask)) {\n                return;\n            }\n            const reEntryGuard = task.state != running;\n            reEntryGuard && task._transitionTo(running, scheduled);\n            task.runCount++;\n            const previousTask = _currentTask;\n            _currentTask = task;\n            _currentZoneFrame = { parent: _currentZoneFrame, zone: this };\n            try {\n                if (task.type == macroTask && task.data && !task.data.isPeriodic) {\n                    task.cancelFn = undefined;\n                }\n                try {\n                    return this._zoneDelegate.invokeTask(this, task, applyThis, applyArgs);\n                }\n                catch (error) {\n                    if (this._zoneDelegate.handleError(this, error)) {\n                        throw error;\n                    }\n                }\n            }\n            finally {\n                // if the task's state is notScheduled or unknown, then it has already been cancelled\n                // we should not reset the state to scheduled\n                if (task.state !== notScheduled && task.state !== unknown) {\n                    if (task.type == eventTask || (task.data && task.data.isPeriodic)) {\n                        reEntryGuard && task._transitionTo(scheduled, running);\n                    }\n                    else {\n                        task.runCount = 0;\n                        this._updateTaskCount(task, -1);\n                        reEntryGuard &&\n                            task._transitionTo(notScheduled, running, notScheduled);\n                    }\n                }\n                _currentZoneFrame = _currentZoneFrame.parent;\n                _currentTask = previousTask;\n            }\n        }\n        scheduleTask(task) {\n            if (task.zone && task.zone !== this) {\n                // check if the task was rescheduled, the newZone\n                // should not be the children of the original zone\n                let newZone = this;\n                while (newZone) {\n                    if (newZone === task.zone) {\n                        throw Error(`can not reschedule task to ${this.name} which is descendants of the original zone ${task.zone.name}`);\n                    }\n                    newZone = newZone.parent;\n                }\n            }\n            task._transitionTo(scheduling, notScheduled);\n            const zoneDelegates = [];\n            task._zoneDelegates = zoneDelegates;\n            task._zone = this;\n            try {\n                task = this._zoneDelegate.scheduleTask(this, task);\n            }\n            catch (err) {\n                // should set task's state to unknown when scheduleTask throw error\n                // because the err may from reschedule, so the fromState maybe notScheduled\n                task._transitionTo(unknown, scheduling, notScheduled);\n                // TODO: @JiaLiPassion, should we check the result from handleError?\n                this._zoneDelegate.handleError(this, err);\n                throw err;\n            }\n            if (task._zoneDelegates === zoneDelegates) {\n                // we have to check because internally the delegate can reschedule the task.\n                this._updateTaskCount(task, 1);\n            }\n            if (task.state == scheduling) {\n                task._transitionTo(scheduled, scheduling);\n            }\n            return task;\n        }\n        scheduleMicroTask(source, callback, data, customSchedule) {\n            return this.scheduleTask(new ZoneTask(microTask, source, callback, data, customSchedule, undefined));\n        }\n        scheduleMacroTask(source, callback, data, customSchedule, customCancel) {\n            return this.scheduleTask(new ZoneTask(macroTask, source, callback, data, customSchedule, customCancel));\n        }\n        scheduleEventTask(source, callback, data, customSchedule, customCancel) {\n            return this.scheduleTask(new ZoneTask(eventTask, source, callback, data, customSchedule, customCancel));\n        }\n        cancelTask(task) {\n            if (task.zone != this)\n                throw new Error('A task can only be cancelled in the zone of creation! (Creation: ' +\n                    (task.zone || NO_ZONE).name + '; Execution: ' + this.name + ')');\n            task._transitionTo(canceling, scheduled, running);\n            try {\n                this._zoneDelegate.cancelTask(this, task);\n            }\n            catch (err) {\n                // if error occurs when cancelTask, transit the state to unknown\n                task._transitionTo(unknown, canceling);\n                this._zoneDelegate.handleError(this, err);\n                throw err;\n            }\n            this._updateTaskCount(task, -1);\n            task._transitionTo(notScheduled, canceling);\n            task.runCount = 0;\n            return task;\n        }\n        _updateTaskCount(task, count) {\n            const zoneDelegates = task._zoneDelegates;\n            if (count == -1) {\n                task._zoneDelegates = null;\n            }\n            for (let i = 0; i < zoneDelegates.length; i++) {\n                zoneDelegates[i]._updateTaskCount(task.type, count);\n            }\n        }\n    }\n    Zone.__symbol__ = __symbol__;\n    const DELEGATE_ZS = {\n        name: '',\n        onHasTask: (delegate, _, target, hasTaskState) => delegate.hasTask(target, hasTaskState),\n        onScheduleTask: (delegate, _, target, task) => delegate.scheduleTask(target, task),\n        onInvokeTask: (delegate, _, target, task, applyThis, applyArgs) => delegate.invokeTask(target, task, applyThis, applyArgs),\n        onCancelTask: (delegate, _, target, task) => delegate.cancelTask(target, task)\n    };\n    class ZoneDelegate {\n        constructor(zone, parentDelegate, zoneSpec) {\n            this._taskCounts = { 'microTask': 0, 'macroTask': 0, 'eventTask': 0 };\n            this.zone = zone;\n            this._parentDelegate = parentDelegate;\n            this._forkZS = zoneSpec && (zoneSpec && zoneSpec.onFork ? zoneSpec : parentDelegate._forkZS);\n            this._forkDlgt = zoneSpec && (zoneSpec.onFork ? parentDelegate : parentDelegate._forkDlgt);\n            this._forkCurrZone = zoneSpec && (zoneSpec.onFork ? this.zone : parentDelegate.zone);\n            this._interceptZS =\n                zoneSpec && (zoneSpec.onIntercept ? zoneSpec : parentDelegate._interceptZS);\n            this._interceptDlgt =\n                zoneSpec && (zoneSpec.onIntercept ? parentDelegate : parentDelegate._interceptDlgt);\n            this._interceptCurrZone =\n                zoneSpec && (zoneSpec.onIntercept ? this.zone : parentDelegate.zone);\n            this._invokeZS = zoneSpec && (zoneSpec.onInvoke ? zoneSpec : parentDelegate._invokeZS);\n            this._invokeDlgt =\n                zoneSpec && (zoneSpec.onInvoke ? parentDelegate : parentDelegate._invokeDlgt);\n            this._invokeCurrZone = zoneSpec && (zoneSpec.onInvoke ? this.zone : parentDelegate.zone);\n            this._handleErrorZS =\n                zoneSpec && (zoneSpec.onHandleError ? zoneSpec : parentDelegate._handleErrorZS);\n            this._handleErrorDlgt =\n                zoneSpec && (zoneSpec.onHandleError ? parentDelegate : parentDelegate._handleErrorDlgt);\n            this._handleErrorCurrZone =\n                zoneSpec && (zoneSpec.onHandleError ? this.zone : parentDelegate.zone);\n            this._scheduleTaskZS =\n                zoneSpec && (zoneSpec.onScheduleTask ? zoneSpec : parentDelegate._scheduleTaskZS);\n            this._scheduleTaskDlgt = zoneSpec &&\n                (zoneSpec.onScheduleTask ? parentDelegate : parentDelegate._scheduleTaskDlgt);\n            this._scheduleTaskCurrZone =\n                zoneSpec && (zoneSpec.onScheduleTask ? this.zone : parentDelegate.zone);\n            this._invokeTaskZS =\n                zoneSpec && (zoneSpec.onInvokeTask ? zoneSpec : parentDelegate._invokeTaskZS);\n            this._invokeTaskDlgt =\n                zoneSpec && (zoneSpec.onInvokeTask ? parentDelegate : parentDelegate._invokeTaskDlgt);\n            this._invokeTaskCurrZone =\n                zoneSpec && (zoneSpec.onInvokeTask ? this.zone : parentDelegate.zone);\n            this._cancelTaskZS =\n                zoneSpec && (zoneSpec.onCancelTask ? zoneSpec : parentDelegate._cancelTaskZS);\n            this._cancelTaskDlgt =\n                zoneSpec && (zoneSpec.onCancelTask ? parentDelegate : parentDelegate._cancelTaskDlgt);\n            this._cancelTaskCurrZone =\n                zoneSpec && (zoneSpec.onCancelTask ? this.zone : parentDelegate.zone);\n            this._hasTaskZS = null;\n            this._hasTaskDlgt = null;\n            this._hasTaskDlgtOwner = null;\n            this._hasTaskCurrZone = null;\n            const zoneSpecHasTask = zoneSpec && zoneSpec.onHasTask;\n            const parentHasTask = parentDelegate && parentDelegate._hasTaskZS;\n            if (zoneSpecHasTask || parentHasTask) {\n                // If we need to report hasTask, than this ZS needs to do ref counting on tasks. In such\n                // a case all task related interceptors must go through this ZD. We can't short circuit it.\n                this._hasTaskZS = zoneSpecHasTask ? zoneSpec : DELEGATE_ZS;\n                this._hasTaskDlgt = parentDelegate;\n                this._hasTaskDlgtOwner = this;\n                this._hasTaskCurrZone = zone;\n                if (!zoneSpec.onScheduleTask) {\n                    this._scheduleTaskZS = DELEGATE_ZS;\n                    this._scheduleTaskDlgt = parentDelegate;\n                    this._scheduleTaskCurrZone = this.zone;\n                }\n                if (!zoneSpec.onInvokeTask) {\n                    this._invokeTaskZS = DELEGATE_ZS;\n                    this._invokeTaskDlgt = parentDelegate;\n                    this._invokeTaskCurrZone = this.zone;\n                }\n                if (!zoneSpec.onCancelTask) {\n                    this._cancelTaskZS = DELEGATE_ZS;\n                    this._cancelTaskDlgt = parentDelegate;\n                    this._cancelTaskCurrZone = this.zone;\n                }\n            }\n        }\n        fork(targetZone, zoneSpec) {\n            return this._forkZS ? this._forkZS.onFork(this._forkDlgt, this.zone, targetZone, zoneSpec) :\n                new Zone(targetZone, zoneSpec);\n        }\n        intercept(targetZone, callback, source) {\n            return this._interceptZS ?\n                this._interceptZS.onIntercept(this._interceptDlgt, this._interceptCurrZone, targetZone, callback, source) :\n                callback;\n        }\n        invoke(targetZone, callback, applyThis, applyArgs, source) {\n            return this._invokeZS ? this._invokeZS.onInvoke(this._invokeDlgt, this._invokeCurrZone, targetZone, callback, applyThis, applyArgs, source) :\n                callback.apply(applyThis, applyArgs);\n        }\n        handleError(targetZone, error) {\n            return this._handleErrorZS ?\n                this._handleErrorZS.onHandleError(this._handleErrorDlgt, this._handleErrorCurrZone, targetZone, error) :\n                true;\n        }\n        scheduleTask(targetZone, task) {\n            let returnTask = task;\n            if (this._scheduleTaskZS) {\n                if (this._hasTaskZS) {\n                    returnTask._zoneDelegates.push(this._hasTaskDlgtOwner);\n                }\n                returnTask = this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this._scheduleTaskCurrZone, targetZone, task);\n                if (!returnTask)\n                    returnTask = task;\n            }\n            else {\n                if (task.scheduleFn) {\n                    task.scheduleFn(task);\n                }\n                else if (task.type == microTask) {\n                    scheduleMicroTask(task);\n                }\n                else {\n                    throw new Error('Task is missing scheduleFn.');\n                }\n            }\n            return returnTask;\n        }\n        invokeTask(targetZone, task, applyThis, applyArgs) {\n            return this._invokeTaskZS ? this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this._invokeTaskCurrZone, targetZone, task, applyThis, applyArgs) :\n                task.callback.apply(applyThis, applyArgs);\n        }\n        cancelTask(targetZone, task) {\n            let value;\n            if (this._cancelTaskZS) {\n                value = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this._cancelTaskCurrZone, targetZone, task);\n            }\n            else {\n                if (!task.cancelFn) {\n                    throw Error('Task is not cancelable');\n                }\n                value = task.cancelFn(task);\n            }\n            return value;\n        }\n        hasTask(targetZone, isEmpty) {\n            // hasTask should not throw error so other ZoneDelegate\n            // can still trigger hasTask callback\n            try {\n                this._hasTaskZS &&\n                    this._hasTaskZS.onHasTask(this._hasTaskDlgt, this._hasTaskCurrZone, targetZone, isEmpty);\n            }\n            catch (err) {\n                this.handleError(targetZone, err);\n            }\n        }\n        _updateTaskCount(type, count) {\n            const counts = this._taskCounts;\n            const prev = counts[type];\n            const next = counts[type] = prev + count;\n            if (next < 0) {\n                throw new Error('More tasks executed then were scheduled.');\n            }\n            if (prev == 0 || next == 0) {\n                const isEmpty = {\n                    microTask: counts['microTask'] > 0,\n                    macroTask: counts['macroTask'] > 0,\n                    eventTask: counts['eventTask'] > 0,\n                    change: type\n                };\n                this.hasTask(this.zone, isEmpty);\n            }\n        }\n    }\n    class ZoneTask {\n        constructor(type, source, callback, options, scheduleFn, cancelFn) {\n            this._zone = null;\n            this.runCount = 0;\n            this._zoneDelegates = null;\n            this._state = 'notScheduled';\n            this.type = type;\n            this.source = source;\n            this.data = options;\n            this.scheduleFn = scheduleFn;\n            this.cancelFn = cancelFn;\n            this.callback = callback;\n            const self = this;\n            // TODO: @JiaLiPassion options should have interface\n            if (type === eventTask && options && options.useG) {\n                this.invoke = ZoneTask.invokeTask;\n            }\n            else {\n                this.invoke = function () {\n                    return ZoneTask.invokeTask.call(global, self, this, arguments);\n                };\n            }\n        }\n        static invokeTask(task, target, args) {\n            if (!task) {\n                task = this;\n            }\n            _numberOfNestedTaskFrames++;\n            try {\n                task.runCount++;\n                return task.zone.runTask(task, target, args);\n            }\n            finally {\n                if (_numberOfNestedTaskFrames == 1) {\n                    drainMicroTaskQueue();\n                }\n                _numberOfNestedTaskFrames--;\n            }\n        }\n        get zone() {\n            return this._zone;\n        }\n        get state() {\n            return this._state;\n        }\n        cancelScheduleRequest() {\n            this._transitionTo(notScheduled, scheduling);\n        }\n        _transitionTo(toState, fromState1, fromState2) {\n            if (this._state === fromState1 || this._state === fromState2) {\n                this._state = toState;\n                if (toState == notScheduled) {\n                    this._zoneDelegates = null;\n                }\n            }\n            else {\n                throw new Error(`${this.type} '${this.source}': can not transition to '${toState}', expecting state '${fromState1}'${fromState2 ? ' or \\'' + fromState2 + '\\'' : ''}, was '${this._state}'.`);\n            }\n        }\n        toString() {\n            if (this.data && typeof this.data.handleId !== 'undefined') {\n                return this.data.handleId.toString();\n            }\n            else {\n                return Object.prototype.toString.call(this);\n            }\n        }\n        // add toJSON method to prevent cyclic error when\n        // call JSON.stringify(zoneTask)\n        toJSON() {\n            return {\n                type: this.type,\n                state: this.state,\n                source: this.source,\n                zone: this.zone.name,\n                runCount: this.runCount\n            };\n        }\n    }\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    ///  MICROTASK QUEUE\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    const symbolSetTimeout = __symbol__('setTimeout');\n    const symbolPromise = __symbol__('Promise');\n    const symbolThen = __symbol__('then');\n    let _microTaskQueue = [];\n    let _isDrainingMicrotaskQueue = false;\n    let nativeMicroTaskQueuePromise;\n    function scheduleMicroTask(task) {\n        // if we are not running in any task, and there has not been anything scheduled\n        // we must bootstrap the initial task creation by manually scheduling the drain\n        if (_numberOfNestedTaskFrames === 0 && _microTaskQueue.length === 0) {\n            // We are not running in Task, so we need to kickstart the microtask queue.\n            if (!nativeMicroTaskQueuePromise) {\n                if (global[symbolPromise]) {\n                    nativeMicroTaskQueuePromise = global[symbolPromise].resolve(0);\n                }\n            }\n            if (nativeMicroTaskQueuePromise) {\n                let nativeThen = nativeMicroTaskQueuePromise[symbolThen];\n                if (!nativeThen) {\n                    // native Promise is not patchable, we need to use `then` directly\n                    // issue 1078\n                    nativeThen = nativeMicroTaskQueuePromise['then'];\n                }\n                nativeThen.call(nativeMicroTaskQueuePromise, drainMicroTaskQueue);\n            }\n            else {\n                global[symbolSetTimeout](drainMicroTaskQueue, 0);\n            }\n        }\n        task && _microTaskQueue.push(task);\n    }\n    function drainMicroTaskQueue() {\n        if (!_isDrainingMicrotaskQueue) {\n            _isDrainingMicrotaskQueue = true;\n            while (_microTaskQueue.length) {\n                const queue = _microTaskQueue;\n                _microTaskQueue = [];\n                for (let i = 0; i < queue.length; i++) {\n                    const task = queue[i];\n                    try {\n                        task.zone.runTask(task, null, null);\n                    }\n                    catch (error) {\n                        _api.onUnhandledError(error);\n                    }\n                }\n            }\n            _api.microtaskDrainDone();\n            _isDrainingMicrotaskQueue = false;\n        }\n    }\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    ///  BOOTSTRAP\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    const NO_ZONE = { name: 'NO ZONE' };\n    const notScheduled = 'notScheduled', scheduling = 'scheduling', scheduled = 'scheduled', running = 'running', canceling = 'canceling', unknown = 'unknown';\n    const microTask = 'microTask', macroTask = 'macroTask', eventTask = 'eventTask';\n    const patches = {};\n    const _api = {\n        symbol: __symbol__,\n        currentZoneFrame: () => _currentZoneFrame,\n        onUnhandledError: noop,\n        microtaskDrainDone: noop,\n        scheduleMicroTask: scheduleMicroTask,\n        showUncaughtError: () => !Zone[__symbol__('ignoreConsoleErrorUncaughtError')],\n        patchEventTarget: () => [],\n        patchOnProperties: noop,\n        patchMethod: () => noop,\n        bindArguments: () => [],\n        patchThen: () => noop,\n        patchMacroTask: () => noop,\n        setNativePromise: (NativePromise) => {\n            // sometimes NativePromise.resolve static function\n            // is not ready yet, (such as core-js/es6.promise)\n            // so we need to check here.\n            if (NativePromise && typeof NativePromise.resolve === 'function') {\n                nativeMicroTaskQueuePromise = NativePromise.resolve(0);\n            }\n        },\n        patchEventPrototype: () => noop,\n        isIEOrEdge: () => false,\n        getGlobalObjects: () => undefined,\n        ObjectDefineProperty: () => noop,\n        ObjectGetOwnPropertyDescriptor: () => undefined,\n        ObjectCreate: () => undefined,\n        ArraySlice: () => [],\n        patchClass: () => noop,\n        wrapWithCurrentZone: () => noop,\n        filterProperties: () => [],\n        attachOriginToPatched: () => noop,\n        _redefineProperty: () => noop,\n        patchCallbacks: () => noop\n    };\n    let _currentZoneFrame = { parent: null, zone: new Zone(null, null) };\n    let _currentTask = null;\n    let _numberOfNestedTaskFrames = 0;\n    function noop() { }\n    function __symbol__(name) {\n        return '__zone_symbol__' + name;\n    }\n    performanceMeasure('Zone', 'Zone');\n    return global['Zone'] = Zone;\n})(typeof window !== 'undefined' && window || typeof self !== 'undefined' && self || global);\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nZone.__load_patch('ZoneAwarePromise', (global, Zone, api) => {\n    const ObjectGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n    const ObjectDefineProperty = Object.defineProperty;\n    function readableObjectToString(obj) {\n        if (obj && obj.toString === Object.prototype.toString) {\n            const className = obj.constructor && obj.constructor.name;\n            return (className ? className : '') + ': ' + JSON.stringify(obj);\n        }\n        return obj ? obj.toString() : Object.prototype.toString.call(obj);\n    }\n    const __symbol__ = api.symbol;\n    const _uncaughtPromiseErrors = [];\n    const symbolPromise = __symbol__('Promise');\n    const symbolThen = __symbol__('then');\n    const creationTrace = '__creationTrace__';\n    api.onUnhandledError = (e) => {\n        if (api.showUncaughtError()) {\n            const rejection = e && e.rejection;\n            if (rejection) {\n                console.error('Unhandled Promise rejection:', rejection instanceof Error ? rejection.message : rejection, '; Zone:', e.zone.name, '; Task:', e.task && e.task.source, '; Value:', rejection, rejection instanceof Error ? rejection.stack : undefined);\n            }\n            else {\n                console.error(e);\n            }\n        }\n    };\n    api.microtaskDrainDone = () => {\n        while (_uncaughtPromiseErrors.length) {\n            while (_uncaughtPromiseErrors.length) {\n                const uncaughtPromiseError = _uncaughtPromiseErrors.shift();\n                try {\n                    uncaughtPromiseError.zone.runGuarded(() => {\n                        throw uncaughtPromiseError;\n                    });\n                }\n                catch (error) {\n                    handleUnhandledRejection(error);\n                }\n            }\n        }\n    };\n    const UNHANDLED_PROMISE_REJECTION_HANDLER_SYMBOL = __symbol__('unhandledPromiseRejectionHandler');\n    function handleUnhandledRejection(e) {\n        api.onUnhandledError(e);\n        try {\n            const handler = Zone[UNHANDLED_PROMISE_REJECTION_HANDLER_SYMBOL];\n            if (handler && typeof handler === 'function') {\n                handler.call(this, e);\n            }\n        }\n        catch (err) {\n        }\n    }\n    function isThenable(value) {\n        return value && value.then;\n    }\n    function forwardResolution(value) {\n        return value;\n    }\n    function forwardRejection(rejection) {\n        return ZoneAwarePromise.reject(rejection);\n    }\n    const symbolState = __symbol__('state');\n    const symbolValue = __symbol__('value');\n    const symbolFinally = __symbol__('finally');\n    const symbolParentPromiseValue = __symbol__('parentPromiseValue');\n    const symbolParentPromiseState = __symbol__('parentPromiseState');\n    const source = 'Promise.then';\n    const UNRESOLVED = null;\n    const RESOLVED = true;\n    const REJECTED = false;\n    const REJECTED_NO_CATCH = 0;\n    function makeResolver(promise, state) {\n        return (v) => {\n            try {\n                resolvePromise(promise, state, v);\n            }\n            catch (err) {\n                resolvePromise(promise, false, err);\n            }\n            // Do not return value or you will break the Promise spec.\n        };\n    }\n    const once = function () {\n        let wasCalled = false;\n        return function wrapper(wrappedFunction) {\n            return function () {\n                if (wasCalled) {\n                    return;\n                }\n                wasCalled = true;\n                wrappedFunction.apply(null, arguments);\n            };\n        };\n    };\n    const TYPE_ERROR = 'Promise resolved with itself';\n    const CURRENT_TASK_TRACE_SYMBOL = __symbol__('currentTaskTrace');\n    // Promise Resolution\n    function resolvePromise(promise, state, value) {\n        const onceWrapper = once();\n        if (promise === value) {\n            throw new TypeError(TYPE_ERROR);\n        }\n        if (promise[symbolState] === UNRESOLVED) {\n            // should only get value.then once based on promise spec.\n            let then = null;\n            try {\n                if (typeof value === 'object' || typeof value === 'function') {\n                    then = value && value.then;\n                }\n            }\n            catch (err) {\n                onceWrapper(() => {\n                    resolvePromise(promise, false, err);\n                })();\n                return promise;\n            }\n            // if (value instanceof ZoneAwarePromise) {\n            if (state !== REJECTED && value instanceof ZoneAwarePromise &&\n                value.hasOwnProperty(symbolState) && value.hasOwnProperty(symbolValue) &&\n                value[symbolState] !== UNRESOLVED) {\n                clearRejectedNoCatch(value);\n                resolvePromise(promise, value[symbolState], value[symbolValue]);\n            }\n            else if (state !== REJECTED && typeof then === 'function') {\n                try {\n                    then.call(value, onceWrapper(makeResolver(promise, state)), onceWrapper(makeResolver(promise, false)));\n                }\n                catch (err) {\n                    onceWrapper(() => {\n                        resolvePromise(promise, false, err);\n                    })();\n                }\n            }\n            else {\n                promise[symbolState] = state;\n                const queue = promise[symbolValue];\n                promise[symbolValue] = value;\n                if (promise[symbolFinally] === symbolFinally) {\n                    // the promise is generated by Promise.prototype.finally\n                    if (state === RESOLVED) {\n                        // the state is resolved, should ignore the value\n                        // and use parent promise value\n                        promise[symbolState] = promise[symbolParentPromiseState];\n                        promise[symbolValue] = promise[symbolParentPromiseValue];\n                    }\n                }\n                // record task information in value when error occurs, so we can\n                // do some additional work such as render longStackTrace\n                if (state === REJECTED && value instanceof Error) {\n                    // check if longStackTraceZone is here\n                    const trace = Zone.currentTask && Zone.currentTask.data &&\n                        Zone.currentTask.data[creationTrace];\n                    if (trace) {\n                        // only keep the long stack trace into error when in longStackTraceZone\n                        ObjectDefineProperty(value, CURRENT_TASK_TRACE_SYMBOL, { configurable: true, enumerable: false, writable: true, value: trace });\n                    }\n                }\n                for (let i = 0; i < queue.length;) {\n                    scheduleResolveOrReject(promise, queue[i++], queue[i++], queue[i++], queue[i++]);\n                }\n                if (queue.length == 0 && state == REJECTED) {\n                    promise[symbolState] = REJECTED_NO_CATCH;\n                    try {\n                        // try to print more readable error log\n                        throw new Error('Uncaught (in promise): ' + readableObjectToString(value) +\n                            (value && value.stack ? '\\n' + value.stack : ''));\n                    }\n                    catch (err) {\n                        const error = err;\n                        error.rejection = value;\n                        error.promise = promise;\n                        error.zone = Zone.current;\n                        error.task = Zone.currentTask;\n                        _uncaughtPromiseErrors.push(error);\n                        api.scheduleMicroTask(); // to make sure that it is running\n                    }\n                }\n            }\n        }\n        // Resolving an already resolved promise is a noop.\n        return promise;\n    }\n    const REJECTION_HANDLED_HANDLER = __symbol__('rejectionHandledHandler');\n    function clearRejectedNoCatch(promise) {\n        if (promise[symbolState] === REJECTED_NO_CATCH) {\n            // if the promise is rejected no catch status\n            // and queue.length > 0, means there is a error handler\n            // here to handle the rejected promise, we should trigger\n            // windows.rejectionhandled eventHandler or nodejs rejectionHandled\n            // eventHandler\n            try {\n                const handler = Zone[REJECTION_HANDLED_HANDLER];\n                if (handler && typeof handler === 'function') {\n                    handler.call(this, { rejection: promise[symbolValue], promise: promise });\n                }\n            }\n            catch (err) {\n            }\n            promise[symbolState] = REJECTED;\n            for (let i = 0; i < _uncaughtPromiseErrors.length; i++) {\n                if (promise === _uncaughtPromiseErrors[i].promise) {\n                    _uncaughtPromiseErrors.splice(i, 1);\n                }\n            }\n        }\n    }\n    function scheduleResolveOrReject(promise, zone, chainPromise, onFulfilled, onRejected) {\n        clearRejectedNoCatch(promise);\n        const promiseState = promise[symbolState];\n        const delegate = promiseState ?\n            (typeof onFulfilled === 'function') ? onFulfilled : forwardResolution :\n            (typeof onRejected === 'function') ? onRejected : forwardRejection;\n        zone.scheduleMicroTask(source, () => {\n            try {\n                const parentPromiseValue = promise[symbolValue];\n                const isFinallyPromise = chainPromise && symbolFinally === chainPromise[symbolFinally];\n                if (isFinallyPromise) {\n                    // if the promise is generated from finally call, keep parent promise's state and value\n                    chainPromise[symbolParentPromiseValue] = parentPromiseValue;\n                    chainPromise[symbolParentPromiseState] = promiseState;\n                }\n                // should not pass value to finally callback\n                const value = zone.run(delegate, undefined, isFinallyPromise && delegate !== forwardRejection && delegate !== forwardResolution ?\n                    [] :\n                    [parentPromiseValue]);\n                resolvePromise(chainPromise, true, value);\n            }\n            catch (error) {\n                // if error occurs, should always return this error\n                resolvePromise(chainPromise, false, error);\n            }\n        }, chainPromise);\n    }\n    const ZONE_AWARE_PROMISE_TO_STRING = 'function ZoneAwarePromise() { [native code] }';\n    class ZoneAwarePromise {\n        constructor(executor) {\n            const promise = this;\n            if (!(promise instanceof ZoneAwarePromise)) {\n                throw new Error('Must be an instanceof Promise.');\n            }\n            promise[symbolState] = UNRESOLVED;\n            promise[symbolValue] = []; // queue;\n            try {\n                executor && executor(makeResolver(promise, RESOLVED), makeResolver(promise, REJECTED));\n            }\n            catch (error) {\n                resolvePromise(promise, false, error);\n            }\n        }\n        static toString() {\n            return ZONE_AWARE_PROMISE_TO_STRING;\n        }\n        static resolve(value) {\n            return resolvePromise(new this(null), RESOLVED, value);\n        }\n        static reject(error) {\n            return resolvePromise(new this(null), REJECTED, error);\n        }\n        static race(values) {\n            let resolve;\n            let reject;\n            let promise = new this((res, rej) => {\n                resolve = res;\n                reject = rej;\n            });\n            function onResolve(value) {\n                resolve(value);\n            }\n            function onReject(error) {\n                reject(error);\n            }\n            for (let value of values) {\n                if (!isThenable(value)) {\n                    value = this.resolve(value);\n                }\n                value.then(onResolve, onReject);\n            }\n            return promise;\n        }\n        static all(values) {\n            let resolve;\n            let reject;\n            let promise = new this((res, rej) => {\n                resolve = res;\n                reject = rej;\n            });\n            // Start at 2 to prevent prematurely resolving if .then is called immediately.\n            let unresolvedCount = 2;\n            let valueIndex = 0;\n            const resolvedValues = [];\n            for (let value of values) {\n                if (!isThenable(value)) {\n                    value = this.resolve(value);\n                }\n                const curValueIndex = valueIndex;\n                value.then((value) => {\n                    resolvedValues[curValueIndex] = value;\n                    unresolvedCount--;\n                    if (unresolvedCount === 0) {\n                        resolve(resolvedValues);\n                    }\n                }, reject);\n                unresolvedCount++;\n                valueIndex++;\n            }\n            // Make the unresolvedCount zero-based again.\n            unresolvedCount -= 2;\n            if (unresolvedCount === 0) {\n                resolve(resolvedValues);\n            }\n            return promise;\n        }\n        get [Symbol.toStringTag]() {\n            return 'Promise';\n        }\n        then(onFulfilled, onRejected) {\n            const chainPromise = new this.constructor(null);\n            const zone = Zone.current;\n            if (this[symbolState] == UNRESOLVED) {\n                this[symbolValue].push(zone, chainPromise, onFulfilled, onRejected);\n            }\n            else {\n                scheduleResolveOrReject(this, zone, chainPromise, onFulfilled, onRejected);\n            }\n            return chainPromise;\n        }\n        catch(onRejected) {\n            return this.then(null, onRejected);\n        }\n        finally(onFinally) {\n            const chainPromise = new this.constructor(null);\n            chainPromise[symbolFinally] = symbolFinally;\n            const zone = Zone.current;\n            if (this[symbolState] == UNRESOLVED) {\n                this[symbolValue].push(zone, chainPromise, onFinally, onFinally);\n            }\n            else {\n                scheduleResolveOrReject(this, zone, chainPromise, onFinally, onFinally);\n            }\n            return chainPromise;\n        }\n    }\n    // Protect against aggressive optimizers dropping seemingly unused properties.\n    // E.g. Closure Compiler in advanced mode.\n    ZoneAwarePromise['resolve'] = ZoneAwarePromise.resolve;\n    ZoneAwarePromise['reject'] = ZoneAwarePromise.reject;\n    ZoneAwarePromise['race'] = ZoneAwarePromise.race;\n    ZoneAwarePromise['all'] = ZoneAwarePromise.all;\n    const NativePromise = global[symbolPromise] = global['Promise'];\n    const ZONE_AWARE_PROMISE = Zone.__symbol__('ZoneAwarePromise');\n    let desc = ObjectGetOwnPropertyDescriptor(global, 'Promise');\n    if (!desc || desc.configurable) {\n        desc && delete desc.writable;\n        desc && delete desc.value;\n        if (!desc) {\n            desc = { configurable: true, enumerable: true };\n        }\n        desc.get = function () {\n            // if we already set ZoneAwarePromise, use patched one\n            // otherwise return native one.\n            return global[ZONE_AWARE_PROMISE] ? global[ZONE_AWARE_PROMISE] : global[symbolPromise];\n        };\n        desc.set = function (NewNativePromise) {\n            if (NewNativePromise === ZoneAwarePromise) {\n                // if the NewNativePromise is ZoneAwarePromise\n                // save to global\n                global[ZONE_AWARE_PROMISE] = NewNativePromise;\n            }\n            else {\n                // if the NewNativePromise is not ZoneAwarePromise\n                // for example: after load zone.js, some library just\n                // set es6-promise to global, if we set it to global\n                // directly, assertZonePatched will fail and angular\n                // will not loaded, so we just set the NewNativePromise\n                // to global[symbolPromise], so the result is just like\n                // we load ES6 Promise before zone.js\n                global[symbolPromise] = NewNativePromise;\n                if (!NewNativePromise.prototype[symbolThen]) {\n                    patchThen(NewNativePromise);\n                }\n                api.setNativePromise(NewNativePromise);\n            }\n        };\n        ObjectDefineProperty(global, 'Promise', desc);\n    }\n    global['Promise'] = ZoneAwarePromise;\n    const symbolThenPatched = __symbol__('thenPatched');\n    function patchThen(Ctor) {\n        const proto = Ctor.prototype;\n        const prop = ObjectGetOwnPropertyDescriptor(proto, 'then');\n        if (prop && (prop.writable === false || !prop.configurable)) {\n            // check Ctor.prototype.then propertyDescriptor is writable or not\n            // in meteor env, writable is false, we should ignore such case\n            return;\n        }\n        const originalThen = proto.then;\n        // Keep a reference to the original method.\n        proto[symbolThen] = originalThen;\n        Ctor.prototype.then = function (onResolve, onReject) {\n            const wrapped = new ZoneAwarePromise((resolve, reject) => {\n                originalThen.call(this, resolve, reject);\n            });\n            return wrapped.then(onResolve, onReject);\n        };\n        Ctor[symbolThenPatched] = true;\n    }\n    api.patchThen = patchThen;\n    function zoneify(fn) {\n        return function () {\n            let resultPromise = fn.apply(this, arguments);\n            if (resultPromise instanceof ZoneAwarePromise) {\n                return resultPromise;\n            }\n            let ctor = resultPromise.constructor;\n            if (!ctor[symbolThenPatched]) {\n                patchThen(ctor);\n            }\n            return resultPromise;\n        };\n    }\n    if (NativePromise) {\n        patchThen(NativePromise);\n        const fetch = global['fetch'];\n        if (typeof fetch == 'function') {\n            global[api.symbol('fetch')] = fetch;\n            global['fetch'] = zoneify(fetch);\n        }\n    }\n    // This is not part of public API, but it is useful for tests, so we expose it.\n    Promise[Zone.__symbol__('uncaughtPromiseErrors')] = _uncaughtPromiseErrors;\n    return ZoneAwarePromise;\n});\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Suppress closure compiler errors about unknown 'Zone' variable\n * @fileoverview\n * @suppress {undefinedVars,globalThis,missingRequire}\n */\n// issue #989, to reduce bundle size, use short name\n/** Object.getOwnPropertyDescriptor */\nconst ObjectGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n/** Object.defineProperty */\nconst ObjectDefineProperty = Object.defineProperty;\n/** Object.getPrototypeOf */\nconst ObjectGetPrototypeOf = Object.getPrototypeOf;\n/** Object.create */\nconst ObjectCreate = Object.create;\n/** Array.prototype.slice */\nconst ArraySlice = Array.prototype.slice;\n/** addEventListener string const */\nconst ADD_EVENT_LISTENER_STR = 'addEventListener';\n/** removeEventListener string const */\nconst REMOVE_EVENT_LISTENER_STR = 'removeEventListener';\n/** zoneSymbol addEventListener */\nconst ZONE_SYMBOL_ADD_EVENT_LISTENER = Zone.__symbol__(ADD_EVENT_LISTENER_STR);\n/** zoneSymbol removeEventListener */\nconst ZONE_SYMBOL_REMOVE_EVENT_LISTENER = Zone.__symbol__(REMOVE_EVENT_LISTENER_STR);\n/** true string const */\nconst TRUE_STR = 'true';\n/** false string const */\nconst FALSE_STR = 'false';\n/** __zone_symbol__ string const */\nconst ZONE_SYMBOL_PREFIX = '__zone_symbol__';\nfunction wrapWithCurrentZone(callback, source) {\n    return Zone.current.wrap(callback, source);\n}\nfunction scheduleMacroTaskWithCurrentZone(source, callback, data, customSchedule, customCancel) {\n    return Zone.current.scheduleMacroTask(source, callback, data, customSchedule, customCancel);\n}\nconst zoneSymbol = Zone.__symbol__;\nconst isWindowExists = typeof window !== 'undefined';\nconst internalWindow = isWindowExists ? window : undefined;\nconst _global = isWindowExists && internalWindow || typeof self === 'object' && self || global;\nconst REMOVE_ATTRIBUTE = 'removeAttribute';\nconst NULL_ON_PROP_VALUE = [null];\nfunction bindArguments(args, source) {\n    for (let i = args.length - 1; i >= 0; i--) {\n        if (typeof args[i] === 'function') {\n            args[i] = wrapWithCurrentZone(args[i], source + '_' + i);\n        }\n    }\n    return args;\n}\nfunction patchPrototype(prototype, fnNames) {\n    const source = prototype.constructor['name'];\n    for (let i = 0; i < fnNames.length; i++) {\n        const name = fnNames[i];\n        const delegate = prototype[name];\n        if (delegate) {\n            const prototypeDesc = ObjectGetOwnPropertyDescriptor(prototype, name);\n            if (!isPropertyWritable(prototypeDesc)) {\n                continue;\n            }\n            prototype[name] = ((delegate) => {\n                const patched = function () {\n                    return delegate.apply(this, bindArguments(arguments, source + '.' + name));\n                };\n                attachOriginToPatched(patched, delegate);\n                return patched;\n            })(delegate);\n        }\n    }\n}\nfunction isPropertyWritable(propertyDesc) {\n    if (!propertyDesc) {\n        return true;\n    }\n    if (propertyDesc.writable === false) {\n        return false;\n    }\n    return !(typeof propertyDesc.get === 'function' && typeof propertyDesc.set === 'undefined');\n}\nconst isWebWorker = (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope);\n// Make sure to access `process` through `_global` so that WebPack does not accidentally browserify\n// this code.\nconst isNode = (!('nw' in _global) && typeof _global.process !== 'undefined' &&\n    {}.toString.call(_global.process) === '[object process]');\nconst isBrowser = !isNode && !isWebWorker && !!(isWindowExists && internalWindow['HTMLElement']);\n// we are in electron of nw, so we are both browser and nodejs\n// Make sure to access `process` through `_global` so that WebPack does not accidentally browserify\n// this code.\nconst isMix = typeof _global.process !== 'undefined' &&\n    {}.toString.call(_global.process) === '[object process]' && !isWebWorker &&\n    !!(isWindowExists && internalWindow['HTMLElement']);\nconst zoneSymbolEventNames = {};\nconst wrapFn = function (event) {\n    // https://github.com/angular/zone.js/issues/911, in IE, sometimes\n    // event will be undefined, so we need to use window.event\n    event = event || _global.event;\n    if (!event) {\n        return;\n    }\n    let eventNameSymbol = zoneSymbolEventNames[event.type];\n    if (!eventNameSymbol) {\n        eventNameSymbol = zoneSymbolEventNames[event.type] = zoneSymbol('ON_PROPERTY' + event.type);\n    }\n    const target = this || event.target || _global;\n    const listener = target[eventNameSymbol];\n    let result;\n    if (isBrowser && target === internalWindow && event.type === 'error') {\n        // window.onerror have different signiture\n        // https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror#window.onerror\n        // and onerror callback will prevent default when callback return true\n        const errorEvent = event;\n        result = listener &&\n            listener.call(this, errorEvent.message, errorEvent.filename, errorEvent.lineno, errorEvent.colno, errorEvent.error);\n        if (result === true) {\n            event.preventDefault();\n        }\n    }\n    else {\n        result = listener && listener.apply(this, arguments);\n        if (result != undefined && !result) {\n            event.preventDefault();\n        }\n    }\n    return result;\n};\nfunction patchProperty(obj, prop, prototype) {\n    let desc = ObjectGetOwnPropertyDescriptor(obj, prop);\n    if (!desc && prototype) {\n        // when patch window object, use prototype to check prop exist or not\n        const prototypeDesc = ObjectGetOwnPropertyDescriptor(prototype, prop);\n        if (prototypeDesc) {\n            desc = { enumerable: true, configurable: true };\n        }\n    }\n    // if the descriptor not exists or is not configurable\n    // just return\n    if (!desc || !desc.configurable) {\n        return;\n    }\n    const onPropPatchedSymbol = zoneSymbol('on' + prop + 'patched');\n    if (obj.hasOwnProperty(onPropPatchedSymbol) && obj[onPropPatchedSymbol]) {\n        return;\n    }\n    // A property descriptor cannot have getter/setter and be writable\n    // deleting the writable and value properties avoids this error:\n    //\n    // TypeError: property descriptors must not specify a value or be writable when a\n    // getter or setter has been specified\n    delete desc.writable;\n    delete desc.value;\n    const originalDescGet = desc.get;\n    const originalDescSet = desc.set;\n    // substr(2) cuz 'onclick' -> 'click', etc\n    const eventName = prop.substr(2);\n    let eventNameSymbol = zoneSymbolEventNames[eventName];\n    if (!eventNameSymbol) {\n        eventNameSymbol = zoneSymbolEventNames[eventName] = zoneSymbol('ON_PROPERTY' + eventName);\n    }\n    desc.set = function (newValue) {\n        // in some of windows's onproperty callback, this is undefined\n        // so we need to check it\n        let target = this;\n        if (!target && obj === _global) {\n            target = _global;\n        }\n        if (!target) {\n            return;\n        }\n        let previousValue = target[eventNameSymbol];\n        if (previousValue) {\n            target.removeEventListener(eventName, wrapFn);\n        }\n        // issue #978, when onload handler was added before loading zone.js\n        // we should remove it with originalDescSet\n        if (originalDescSet) {\n            originalDescSet.apply(target, NULL_ON_PROP_VALUE);\n        }\n        if (typeof newValue === 'function') {\n            target[eventNameSymbol] = newValue;\n            target.addEventListener(eventName, wrapFn, false);\n        }\n        else {\n            target[eventNameSymbol] = null;\n        }\n    };\n    // The getter would return undefined for unassigned properties but the default value of an\n    // unassigned property is null\n    desc.get = function () {\n        // in some of windows's onproperty callback, this is undefined\n        // so we need to check it\n        let target = this;\n        if (!target && obj === _global) {\n            target = _global;\n        }\n        if (!target) {\n            return null;\n        }\n        const listener = target[eventNameSymbol];\n        if (listener) {\n            return listener;\n        }\n        else if (originalDescGet) {\n            // result will be null when use inline event attribute,\n            // such as <button onclick=\"func();\">OK</button>\n            // because the onclick function is internal raw uncompiled handler\n            // the onclick will be evaluated when first time event was triggered or\n            // the property is accessed, https://github.com/angular/zone.js/issues/525\n            // so we should use original native get to retrieve the handler\n            let value = originalDescGet && originalDescGet.call(this);\n            if (value) {\n                desc.set.call(this, value);\n                if (typeof target[REMOVE_ATTRIBUTE] === 'function') {\n                    target.removeAttribute(prop);\n                }\n                return value;\n            }\n        }\n        return null;\n    };\n    ObjectDefineProperty(obj, prop, desc);\n    obj[onPropPatchedSymbol] = true;\n}\nfunction patchOnProperties(obj, properties, prototype) {\n    if (properties) {\n        for (let i = 0; i < properties.length; i++) {\n            patchProperty(obj, 'on' + properties[i], prototype);\n        }\n    }\n    else {\n        const onProperties = [];\n        for (const prop in obj) {\n            if (prop.substr(0, 2) == 'on') {\n                onProperties.push(prop);\n            }\n        }\n        for (let j = 0; j < onProperties.length; j++) {\n            patchProperty(obj, onProperties[j], prototype);\n        }\n    }\n}\nconst originalInstanceKey = zoneSymbol('originalInstance');\n// wrap some native API on `window`\nfunction patchClass(className) {\n    const OriginalClass = _global[className];\n    if (!OriginalClass)\n        return;\n    // keep original class in global\n    _global[zoneSymbol(className)] = OriginalClass;\n    _global[className] = function () {\n        const a = bindArguments(arguments, className);\n        switch (a.length) {\n            case 0:\n                this[originalInstanceKey] = new OriginalClass();\n                break;\n            case 1:\n                this[originalInstanceKey] = new OriginalClass(a[0]);\n                break;\n            case 2:\n                this[originalInstanceKey] = new OriginalClass(a[0], a[1]);\n                break;\n            case 3:\n                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2]);\n                break;\n            case 4:\n                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2], a[3]);\n                break;\n            default:\n                throw new Error('Arg list too long.');\n        }\n    };\n    // attach original delegate to patched function\n    attachOriginToPatched(_global[className], OriginalClass);\n    const instance = new OriginalClass(function () { });\n    let prop;\n    for (prop in instance) {\n        // https://bugs.webkit.org/show_bug.cgi?id=44721\n        if (className === 'XMLHttpRequest' && prop === 'responseBlob')\n            continue;\n        (function (prop) {\n            if (typeof instance[prop] === 'function') {\n                _global[className].prototype[prop] = function () {\n                    return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);\n                };\n            }\n            else {\n                ObjectDefineProperty(_global[className].prototype, prop, {\n                    set: function (fn) {\n                        if (typeof fn === 'function') {\n                            this[originalInstanceKey][prop] = wrapWithCurrentZone(fn, className + '.' + prop);\n                            // keep callback in wrapped function so we can\n                            // use it in Function.prototype.toString to return\n                            // the native one.\n                            attachOriginToPatched(this[originalInstanceKey][prop], fn);\n                        }\n                        else {\n                            this[originalInstanceKey][prop] = fn;\n                        }\n                    },\n                    get: function () {\n                        return this[originalInstanceKey][prop];\n                    }\n                });\n            }\n        }(prop));\n    }\n    for (prop in OriginalClass) {\n        if (prop !== 'prototype' && OriginalClass.hasOwnProperty(prop)) {\n            _global[className][prop] = OriginalClass[prop];\n        }\n    }\n}\nfunction copySymbolProperties(src, dest) {\n    if (typeof Object.getOwnPropertySymbols !== 'function') {\n        return;\n    }\n    const symbols = Object.getOwnPropertySymbols(src);\n    symbols.forEach((symbol) => {\n        const desc = Object.getOwnPropertyDescriptor(src, symbol);\n        Object.defineProperty(dest, symbol, {\n            get: function () {\n                return src[symbol];\n            },\n            set: function (value) {\n                if (desc && (!desc.writable || typeof desc.set !== 'function')) {\n                    // if src[symbol] is not writable or not have a setter, just return\n                    return;\n                }\n                src[symbol] = value;\n            },\n            enumerable: desc ? desc.enumerable : true,\n            configurable: desc ? desc.configurable : true\n        });\n    });\n}\nlet shouldCopySymbolProperties = false;\n\nfunction patchMethod(target, name, patchFn) {\n    let proto = target;\n    while (proto && !proto.hasOwnProperty(name)) {\n        proto = ObjectGetPrototypeOf(proto);\n    }\n    if (!proto && target[name]) {\n        // somehow we did not find it, but we can see it. This happens on IE for Window properties.\n        proto = target;\n    }\n    const delegateName = zoneSymbol(name);\n    let delegate = null;\n    if (proto && !(delegate = proto[delegateName])) {\n        delegate = proto[delegateName] = proto[name];\n        // check whether proto[name] is writable\n        // some property is readonly in safari, such as HtmlCanvasElement.prototype.toBlob\n        const desc = proto && ObjectGetOwnPropertyDescriptor(proto, name);\n        if (isPropertyWritable(desc)) {\n            const patchDelegate = patchFn(delegate, delegateName, name);\n            proto[name] = function () {\n                return patchDelegate(this, arguments);\n            };\n            attachOriginToPatched(proto[name], delegate);\n            if (shouldCopySymbolProperties) {\n                copySymbolProperties(delegate, proto[name]);\n            }\n        }\n    }\n    return delegate;\n}\n// TODO: @JiaLiPassion, support cancel task later if necessary\nfunction patchMacroTask(obj, funcName, metaCreator) {\n    let setNative = null;\n    function scheduleTask(task) {\n        const data = task.data;\n        data.args[data.cbIdx] = function () {\n            task.invoke.apply(this, arguments);\n        };\n        setNative.apply(data.target, data.args);\n        return task;\n    }\n    setNative = patchMethod(obj, funcName, (delegate) => function (self, args) {\n        const meta = metaCreator(self, args);\n        if (meta.cbIdx >= 0 && typeof args[meta.cbIdx] === 'function') {\n            return scheduleMacroTaskWithCurrentZone(meta.name, args[meta.cbIdx], meta, scheduleTask);\n        }\n        else {\n            // cause an error by calling it directly.\n            return delegate.apply(self, args);\n        }\n    });\n}\n\nfunction attachOriginToPatched(patched, original) {\n    patched[zoneSymbol('OriginalDelegate')] = original;\n}\nlet isDetectedIEOrEdge = false;\nlet ieOrEdge = false;\nfunction isIE() {\n    try {\n        const ua = internalWindow.navigator.userAgent;\n        if (ua.indexOf('MSIE ') !== -1 || ua.indexOf('Trident/') !== -1) {\n            return true;\n        }\n    }\n    catch (error) {\n    }\n    return false;\n}\nfunction isIEOrEdge() {\n    if (isDetectedIEOrEdge) {\n        return ieOrEdge;\n    }\n    isDetectedIEOrEdge = true;\n    try {\n        const ua = internalWindow.navigator.userAgent;\n        if (ua.indexOf('MSIE ') !== -1 || ua.indexOf('Trident/') !== -1 || ua.indexOf('Edge/') !== -1) {\n            ieOrEdge = true;\n        }\n    }\n    catch (error) {\n    }\n    return ieOrEdge;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// override Function.prototype.toString to make zone.js patched function\n// look like native function\nZone.__load_patch('toString', (global) => {\n    // patch Func.prototype.toString to let them look like native\n    const originalFunctionToString = Function.prototype.toString;\n    const ORIGINAL_DELEGATE_SYMBOL = zoneSymbol('OriginalDelegate');\n    const PROMISE_SYMBOL = zoneSymbol('Promise');\n    const ERROR_SYMBOL = zoneSymbol('Error');\n    const newFunctionToString = function toString() {\n        if (typeof this === 'function') {\n            const originalDelegate = this[ORIGINAL_DELEGATE_SYMBOL];\n            if (originalDelegate) {\n                if (typeof originalDelegate === 'function') {\n                    return originalFunctionToString.call(originalDelegate);\n                }\n                else {\n                    return Object.prototype.toString.call(originalDelegate);\n                }\n            }\n            if (this === Promise) {\n                const nativePromise = global[PROMISE_SYMBOL];\n                if (nativePromise) {\n                    return originalFunctionToString.call(nativePromise);\n                }\n            }\n            if (this === Error) {\n                const nativeError = global[ERROR_SYMBOL];\n                if (nativeError) {\n                    return originalFunctionToString.call(nativeError);\n                }\n            }\n        }\n        return originalFunctionToString.call(this);\n    };\n    newFunctionToString[ORIGINAL_DELEGATE_SYMBOL] = originalFunctionToString;\n    Function.prototype.toString = newFunctionToString;\n    // patch Object.prototype.toString to let them look like native\n    const originalObjectToString = Object.prototype.toString;\n    const PROMISE_OBJECT_TO_STRING = '[object Promise]';\n    Object.prototype.toString = function () {\n        if (this instanceof Promise) {\n            return PROMISE_OBJECT_TO_STRING;\n        }\n        return originalObjectToString.call(this);\n    };\n});\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @fileoverview\n * @suppress {missingRequire}\n */\nlet passiveSupported = false;\nif (typeof window !== 'undefined') {\n    try {\n        const options = Object.defineProperty({}, 'passive', {\n            get: function () {\n                passiveSupported = true;\n            }\n        });\n        window.addEventListener('test', options, options);\n        window.removeEventListener('test', options, options);\n    }\n    catch (err) {\n        passiveSupported = false;\n    }\n}\n// an identifier to tell ZoneTask do not create a new invoke closure\nconst OPTIMIZED_ZONE_EVENT_TASK_DATA = {\n    useG: true\n};\nconst zoneSymbolEventNames$1 = {};\nconst globalSources = {};\nconst EVENT_NAME_SYMBOL_REGX = /^__zone_symbol__(\\w+)(true|false)$/;\nconst IMMEDIATE_PROPAGATION_SYMBOL = ('__zone_symbol__propagationStopped');\nfunction patchEventTarget(_global, apis, patchOptions) {\n    const ADD_EVENT_LISTENER = (patchOptions && patchOptions.add) || ADD_EVENT_LISTENER_STR;\n    const REMOVE_EVENT_LISTENER = (patchOptions && patchOptions.rm) || REMOVE_EVENT_LISTENER_STR;\n    const LISTENERS_EVENT_LISTENER = (patchOptions && patchOptions.listeners) || 'eventListeners';\n    const REMOVE_ALL_LISTENERS_EVENT_LISTENER = (patchOptions && patchOptions.rmAll) || 'removeAllListeners';\n    const zoneSymbolAddEventListener = zoneSymbol(ADD_EVENT_LISTENER);\n    const ADD_EVENT_LISTENER_SOURCE = '.' + ADD_EVENT_LISTENER + ':';\n    const PREPEND_EVENT_LISTENER = 'prependListener';\n    const PREPEND_EVENT_LISTENER_SOURCE = '.' + PREPEND_EVENT_LISTENER + ':';\n    const invokeTask = function (task, target, event) {\n        // for better performance, check isRemoved which is set\n        // by removeEventListener\n        if (task.isRemoved) {\n            return;\n        }\n        const delegate = task.callback;\n        if (typeof delegate === 'object' && delegate.handleEvent) {\n            // create the bind version of handleEvent when invoke\n            task.callback = (event) => delegate.handleEvent(event);\n            task.originalDelegate = delegate;\n        }\n        // invoke static task.invoke\n        task.invoke(task, target, [event]);\n        const options = task.options;\n        if (options && typeof options === 'object' && options.once) {\n            // if options.once is true, after invoke once remove listener here\n            // only browser need to do this, nodejs eventEmitter will cal removeListener\n            // inside EventEmitter.once\n            const delegate = task.originalDelegate ? task.originalDelegate : task.callback;\n            target[REMOVE_EVENT_LISTENER].call(target, event.type, delegate, options);\n        }\n    };\n    // global shared zoneAwareCallback to handle all event callback with capture = false\n    const globalZoneAwareCallback = function (event) {\n        // https://github.com/angular/zone.js/issues/911, in IE, sometimes\n        // event will be undefined, so we need to use window.event\n        event = event || _global.event;\n        if (!event) {\n            return;\n        }\n        // event.target is needed for Samsung TV and SourceBuffer\n        // || global is needed https://github.com/angular/zone.js/issues/190\n        const target = this || event.target || _global;\n        const tasks = target[zoneSymbolEventNames$1[event.type][FALSE_STR]];\n        if (tasks) {\n            // invoke all tasks which attached to current target with given event.type and capture = false\n            // for performance concern, if task.length === 1, just invoke\n            if (tasks.length === 1) {\n                invokeTask(tasks[0], target, event);\n            }\n            else {\n                // https://github.com/angular/zone.js/issues/836\n                // copy the tasks array before invoke, to avoid\n                // the callback will remove itself or other listener\n                const copyTasks = tasks.slice();\n                for (let i = 0; i < copyTasks.length; i++) {\n                    if (event && event[IMMEDIATE_PROPAGATION_SYMBOL] === true) {\n                        break;\n                    }\n                    invokeTask(copyTasks[i], target, event);\n                }\n            }\n        }\n    };\n    // global shared zoneAwareCallback to handle all event callback with capture = true\n    const globalZoneAwareCaptureCallback = function (event) {\n        // https://github.com/angular/zone.js/issues/911, in IE, sometimes\n        // event will be undefined, so we need to use window.event\n        event = event || _global.event;\n        if (!event) {\n            return;\n        }\n        // event.target is needed for Samsung TV and SourceBuffer\n        // || global is needed https://github.com/angular/zone.js/issues/190\n        const target = this || event.target || _global;\n        const tasks = target[zoneSymbolEventNames$1[event.type][TRUE_STR]];\n        if (tasks) {\n            // invoke all tasks which attached to current target with given event.type and capture = false\n            // for performance concern, if task.length === 1, just invoke\n            if (tasks.length === 1) {\n                invokeTask(tasks[0], target, event);\n            }\n            else {\n                // https://github.com/angular/zone.js/issues/836\n                // copy the tasks array before invoke, to avoid\n                // the callback will remove itself or other listener\n                const copyTasks = tasks.slice();\n                for (let i = 0; i < copyTasks.length; i++) {\n                    if (event && event[IMMEDIATE_PROPAGATION_SYMBOL] === true) {\n                        break;\n                    }\n                    invokeTask(copyTasks[i], target, event);\n                }\n            }\n        }\n    };\n    function patchEventTargetMethods(obj, patchOptions) {\n        if (!obj) {\n            return false;\n        }\n        let useGlobalCallback = true;\n        if (patchOptions && patchOptions.useG !== undefined) {\n            useGlobalCallback = patchOptions.useG;\n        }\n        const validateHandler = patchOptions && patchOptions.vh;\n        let checkDuplicate = true;\n        if (patchOptions && patchOptions.chkDup !== undefined) {\n            checkDuplicate = patchOptions.chkDup;\n        }\n        let returnTarget = false;\n        if (patchOptions && patchOptions.rt !== undefined) {\n            returnTarget = patchOptions.rt;\n        }\n        let proto = obj;\n        while (proto && !proto.hasOwnProperty(ADD_EVENT_LISTENER)) {\n            proto = ObjectGetPrototypeOf(proto);\n        }\n        if (!proto && obj[ADD_EVENT_LISTENER]) {\n            // somehow we did not find it, but we can see it. This happens on IE for Window properties.\n            proto = obj;\n        }\n        if (!proto) {\n            return false;\n        }\n        if (proto[zoneSymbolAddEventListener]) {\n            return false;\n        }\n        const eventNameToString = patchOptions && patchOptions.eventNameToString;\n        // a shared global taskData to pass data for scheduleEventTask\n        // so we do not need to create a new object just for pass some data\n        const taskData = {};\n        const nativeAddEventListener = proto[zoneSymbolAddEventListener] = proto[ADD_EVENT_LISTENER];\n        const nativeRemoveEventListener = proto[zoneSymbol(REMOVE_EVENT_LISTENER)] =\n            proto[REMOVE_EVENT_LISTENER];\n        const nativeListeners = proto[zoneSymbol(LISTENERS_EVENT_LISTENER)] =\n            proto[LISTENERS_EVENT_LISTENER];\n        const nativeRemoveAllListeners = proto[zoneSymbol(REMOVE_ALL_LISTENERS_EVENT_LISTENER)] =\n            proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER];\n        let nativePrependEventListener;\n        if (patchOptions && patchOptions.prepend) {\n            nativePrependEventListener = proto[zoneSymbol(patchOptions.prepend)] =\n                proto[patchOptions.prepend];\n        }\n        function checkIsPassive(task) {\n            if (!passiveSupported && typeof taskData.options !== 'boolean' &&\n                typeof taskData.options !== 'undefined' && taskData.options !== null) {\n                // options is a non-null non-undefined object\n                // passive is not supported\n                // don't pass options as object\n                // just pass capture as a boolean\n                task.options = !!taskData.options.capture;\n                taskData.options = task.options;\n            }\n        }\n        const customScheduleGlobal = function (task) {\n            // if there is already a task for the eventName + capture,\n            // just return, because we use the shared globalZoneAwareCallback here.\n            if (taskData.isExisting) {\n                return;\n            }\n            checkIsPassive(task);\n            return nativeAddEventListener.call(taskData.target, taskData.eventName, taskData.capture ? globalZoneAwareCaptureCallback : globalZoneAwareCallback, taskData.options);\n        };\n        const customCancelGlobal = function (task) {\n            // if task is not marked as isRemoved, this call is directly\n            // from Zone.prototype.cancelTask, we should remove the task\n            // from tasksList of target first\n            if (!task.isRemoved) {\n                const symbolEventNames = zoneSymbolEventNames$1[task.eventName];\n                let symbolEventName;\n                if (symbolEventNames) {\n                    symbolEventName = symbolEventNames[task.capture ? TRUE_STR : FALSE_STR];\n                }\n                const existingTasks = symbolEventName && task.target[symbolEventName];\n                if (existingTasks) {\n                    for (let i = 0; i < existingTasks.length; i++) {\n                        const existingTask = existingTasks[i];\n                        if (existingTask === task) {\n                            existingTasks.splice(i, 1);\n                            // set isRemoved to data for faster invokeTask check\n                            task.isRemoved = true;\n                            if (existingTasks.length === 0) {\n                                // all tasks for the eventName + capture have gone,\n                                // remove globalZoneAwareCallback and remove the task cache from target\n                                task.allRemoved = true;\n                                task.target[symbolEventName] = null;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n            // if all tasks for the eventName + capture have gone,\n            // we will really remove the global event callback,\n            // if not, return\n            if (!task.allRemoved) {\n                return;\n            }\n            return nativeRemoveEventListener.call(task.target, task.eventName, task.capture ? globalZoneAwareCaptureCallback : globalZoneAwareCallback, task.options);\n        };\n        const customScheduleNonGlobal = function (task) {\n            checkIsPassive(task);\n            return nativeAddEventListener.call(taskData.target, taskData.eventName, task.invoke, taskData.options);\n        };\n        const customSchedulePrepend = function (task) {\n            return nativePrependEventListener.call(taskData.target, taskData.eventName, task.invoke, taskData.options);\n        };\n        const customCancelNonGlobal = function (task) {\n            return nativeRemoveEventListener.call(task.target, task.eventName, task.invoke, task.options);\n        };\n        const customSchedule = useGlobalCallback ? customScheduleGlobal : customScheduleNonGlobal;\n        const customCancel = useGlobalCallback ? customCancelGlobal : customCancelNonGlobal;\n        const compareTaskCallbackVsDelegate = function (task, delegate) {\n            const typeOfDelegate = typeof delegate;\n            return (typeOfDelegate === 'function' && task.callback === delegate) ||\n                (typeOfDelegate === 'object' && task.originalDelegate === delegate);\n        };\n        const compare = (patchOptions && patchOptions.diff) ? patchOptions.diff : compareTaskCallbackVsDelegate;\n        const blackListedEvents = Zone[Zone.__symbol__('BLACK_LISTED_EVENTS')];\n        const makeAddListener = function (nativeListener, addSource, customScheduleFn, customCancelFn, returnTarget = false, prepend = false) {\n            return function () {\n                const target = this || _global;\n                const eventName = arguments[0];\n                let delegate = arguments[1];\n                if (!delegate) {\n                    return nativeListener.apply(this, arguments);\n                }\n                if (isNode && eventName === 'uncaughtException') {\n                    // don't patch uncaughtException of nodejs to prevent endless loop\n                    return nativeListener.apply(this, arguments);\n                }\n                // don't create the bind delegate function for handleEvent\n                // case here to improve addEventListener performance\n                // we will create the bind delegate when invoke\n                let isHandleEvent = false;\n                if (typeof delegate !== 'function') {\n                    if (!delegate.handleEvent) {\n                        return nativeListener.apply(this, arguments);\n                    }\n                    isHandleEvent = true;\n                }\n                if (validateHandler && !validateHandler(nativeListener, delegate, target, arguments)) {\n                    return;\n                }\n                const options = arguments[2];\n                if (blackListedEvents) {\n                    // check black list\n                    for (let i = 0; i < blackListedEvents.length; i++) {\n                        if (eventName === blackListedEvents[i]) {\n                            return nativeListener.apply(this, arguments);\n                        }\n                    }\n                }\n                let capture;\n                let once = false;\n                if (options === undefined) {\n                    capture = false;\n                }\n                else if (options === true) {\n                    capture = true;\n                }\n                else if (options === false) {\n                    capture = false;\n                }\n                else {\n                    capture = options ? !!options.capture : false;\n                    once = options ? !!options.once : false;\n                }\n                const zone = Zone.current;\n                const symbolEventNames = zoneSymbolEventNames$1[eventName];\n                let symbolEventName;\n                if (!symbolEventNames) {\n                    // the code is duplicate, but I just want to get some better performance\n                    const falseEventName = (eventNameToString ? eventNameToString(eventName) : eventName) + FALSE_STR;\n                    const trueEventName = (eventNameToString ? eventNameToString(eventName) : eventName) + TRUE_STR;\n                    const symbol = ZONE_SYMBOL_PREFIX + falseEventName;\n                    const symbolCapture = ZONE_SYMBOL_PREFIX + trueEventName;\n                    zoneSymbolEventNames$1[eventName] = {};\n                    zoneSymbolEventNames$1[eventName][FALSE_STR] = symbol;\n                    zoneSymbolEventNames$1[eventName][TRUE_STR] = symbolCapture;\n                    symbolEventName = capture ? symbolCapture : symbol;\n                }\n                else {\n                    symbolEventName = symbolEventNames[capture ? TRUE_STR : FALSE_STR];\n                }\n                let existingTasks = target[symbolEventName];\n                let isExisting = false;\n                if (existingTasks) {\n                    // already have task registered\n                    isExisting = true;\n                    if (checkDuplicate) {\n                        for (let i = 0; i < existingTasks.length; i++) {\n                            if (compare(existingTasks[i], delegate)) {\n                                // same callback, same capture, same event name, just return\n                                return;\n                            }\n                        }\n                    }\n                }\n                else {\n                    existingTasks = target[symbolEventName] = [];\n                }\n                let source;\n                const constructorName = target.constructor['name'];\n                const targetSource = globalSources[constructorName];\n                if (targetSource) {\n                    source = targetSource[eventName];\n                }\n                if (!source) {\n                    source = constructorName + addSource +\n                        (eventNameToString ? eventNameToString(eventName) : eventName);\n                }\n                // do not create a new object as task.data to pass those things\n                // just use the global shared one\n                taskData.options = options;\n                if (once) {\n                    // if addEventListener with once options, we don't pass it to\n                    // native addEventListener, instead we keep the once setting\n                    // and handle ourselves.\n                    taskData.options.once = false;\n                }\n                taskData.target = target;\n                taskData.capture = capture;\n                taskData.eventName = eventName;\n                taskData.isExisting = isExisting;\n                const data = useGlobalCallback ? OPTIMIZED_ZONE_EVENT_TASK_DATA : undefined;\n                // keep taskData into data to allow onScheduleEventTask to access the task information\n                if (data) {\n                    data.taskData = taskData;\n                }\n                const task = zone.scheduleEventTask(source, delegate, data, customScheduleFn, customCancelFn);\n                // should clear taskData.target to avoid memory leak\n                // issue, https://github.com/angular/angular/issues/20442\n                taskData.target = null;\n                // need to clear up taskData because it is a global object\n                if (data) {\n                    data.taskData = null;\n                }\n                // have to save those information to task in case\n                // application may call task.zone.cancelTask() directly\n                if (once) {\n                    options.once = true;\n                }\n                if (!(!passiveSupported && typeof task.options === 'boolean')) {\n                    // if not support passive, and we pass an option object\n                    // to addEventListener, we should save the options to task\n                    task.options = options;\n                }\n                task.target = target;\n                task.capture = capture;\n                task.eventName = eventName;\n                if (isHandleEvent) {\n                    // save original delegate for compare to check duplicate\n                    task.originalDelegate = delegate;\n                }\n                if (!prepend) {\n                    existingTasks.push(task);\n                }\n                else {\n                    existingTasks.unshift(task);\n                }\n                if (returnTarget) {\n                    return target;\n                }\n            };\n        };\n        proto[ADD_EVENT_LISTENER] = makeAddListener(nativeAddEventListener, ADD_EVENT_LISTENER_SOURCE, customSchedule, customCancel, returnTarget);\n        if (nativePrependEventListener) {\n            proto[PREPEND_EVENT_LISTENER] = makeAddListener(nativePrependEventListener, PREPEND_EVENT_LISTENER_SOURCE, customSchedulePrepend, customCancel, returnTarget, true);\n        }\n        proto[REMOVE_EVENT_LISTENER] = function () {\n            const target = this || _global;\n            const eventName = arguments[0];\n            const options = arguments[2];\n            let capture;\n            if (options === undefined) {\n                capture = false;\n            }\n            else if (options === true) {\n                capture = true;\n            }\n            else if (options === false) {\n                capture = false;\n            }\n            else {\n                capture = options ? !!options.capture : false;\n            }\n            const delegate = arguments[1];\n            if (!delegate) {\n                return nativeRemoveEventListener.apply(this, arguments);\n            }\n            if (validateHandler &&\n                !validateHandler(nativeRemoveEventListener, delegate, target, arguments)) {\n                return;\n            }\n            const symbolEventNames = zoneSymbolEventNames$1[eventName];\n            let symbolEventName;\n            if (symbolEventNames) {\n                symbolEventName = symbolEventNames[capture ? TRUE_STR : FALSE_STR];\n            }\n            const existingTasks = symbolEventName && target[symbolEventName];\n            if (existingTasks) {\n                for (let i = 0; i < existingTasks.length; i++) {\n                    const existingTask = existingTasks[i];\n                    if (compare(existingTask, delegate)) {\n                        existingTasks.splice(i, 1);\n                        // set isRemoved to data for faster invokeTask check\n                        existingTask.isRemoved = true;\n                        if (existingTasks.length === 0) {\n                            // all tasks for the eventName + capture have gone,\n                            // remove globalZoneAwareCallback and remove the task cache from target\n                            existingTask.allRemoved = true;\n                            target[symbolEventName] = null;\n                        }\n                        existingTask.zone.cancelTask(existingTask);\n                        if (returnTarget) {\n                            return target;\n                        }\n                        return;\n                    }\n                }\n            }\n            // issue 930, didn't find the event name or callback\n            // from zone kept existingTasks, the callback maybe\n            // added outside of zone, we need to call native removeEventListener\n            // to try to remove it.\n            return nativeRemoveEventListener.apply(this, arguments);\n        };\n        proto[LISTENERS_EVENT_LISTENER] = function () {\n            const target = this || _global;\n            const eventName = arguments[0];\n            const listeners = [];\n            const tasks = findEventTasks(target, eventNameToString ? eventNameToString(eventName) : eventName);\n            for (let i = 0; i < tasks.length; i++) {\n                const task = tasks[i];\n                let delegate = task.originalDelegate ? task.originalDelegate : task.callback;\n                listeners.push(delegate);\n            }\n            return listeners;\n        };\n        proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER] = function () {\n            const target = this || _global;\n            const eventName = arguments[0];\n            if (!eventName) {\n                const keys = Object.keys(target);\n                for (let i = 0; i < keys.length; i++) {\n                    const prop = keys[i];\n                    const match = EVENT_NAME_SYMBOL_REGX.exec(prop);\n                    let evtName = match && match[1];\n                    // in nodejs EventEmitter, removeListener event is\n                    // used for monitoring the removeListener call,\n                    // so just keep removeListener eventListener until\n                    // all other eventListeners are removed\n                    if (evtName && evtName !== 'removeListener') {\n                        this[REMOVE_ALL_LISTENERS_EVENT_LISTENER].call(this, evtName);\n                    }\n                }\n                // remove removeListener listener finally\n                this[REMOVE_ALL_LISTENERS_EVENT_LISTENER].call(this, 'removeListener');\n            }\n            else {\n                const symbolEventNames = zoneSymbolEventNames$1[eventName];\n                if (symbolEventNames) {\n                    const symbolEventName = symbolEventNames[FALSE_STR];\n                    const symbolCaptureEventName = symbolEventNames[TRUE_STR];\n                    const tasks = target[symbolEventName];\n                    const captureTasks = target[symbolCaptureEventName];\n                    if (tasks) {\n                        const removeTasks = tasks.slice();\n                        for (let i = 0; i < removeTasks.length; i++) {\n                            const task = removeTasks[i];\n                            let delegate = task.originalDelegate ? task.originalDelegate : task.callback;\n                            this[REMOVE_EVENT_LISTENER].call(this, eventName, delegate, task.options);\n                        }\n                    }\n                    if (captureTasks) {\n                        const removeTasks = captureTasks.slice();\n                        for (let i = 0; i < removeTasks.length; i++) {\n                            const task = removeTasks[i];\n                            let delegate = task.originalDelegate ? task.originalDelegate : task.callback;\n                            this[REMOVE_EVENT_LISTENER].call(this, eventName, delegate, task.options);\n                        }\n                    }\n                }\n            }\n            if (returnTarget) {\n                return this;\n            }\n        };\n        // for native toString patch\n        attachOriginToPatched(proto[ADD_EVENT_LISTENER], nativeAddEventListener);\n        attachOriginToPatched(proto[REMOVE_EVENT_LISTENER], nativeRemoveEventListener);\n        if (nativeRemoveAllListeners) {\n            attachOriginToPatched(proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER], nativeRemoveAllListeners);\n        }\n        if (nativeListeners) {\n            attachOriginToPatched(proto[LISTENERS_EVENT_LISTENER], nativeListeners);\n        }\n        return true;\n    }\n    let results = [];\n    for (let i = 0; i < apis.length; i++) {\n        results[i] = patchEventTargetMethods(apis[i], patchOptions);\n    }\n    return results;\n}\nfunction findEventTasks(target, eventName) {\n    const foundTasks = [];\n    for (let prop in target) {\n        const match = EVENT_NAME_SYMBOL_REGX.exec(prop);\n        let evtName = match && match[1];\n        if (evtName && (!eventName || evtName === eventName)) {\n            const tasks = target[prop];\n            if (tasks) {\n                for (let i = 0; i < tasks.length; i++) {\n                    foundTasks.push(tasks[i]);\n                }\n            }\n        }\n    }\n    return foundTasks;\n}\nfunction patchEventPrototype(global, api) {\n    const Event = global['Event'];\n    if (Event && Event.prototype) {\n        api.patchMethod(Event.prototype, 'stopImmediatePropagation', (delegate) => function (self, args) {\n            self[IMMEDIATE_PROPAGATION_SYMBOL] = true;\n            // we need to call the native stopImmediatePropagation\n            // in case in some hybrid application, some part of\n            // application will be controlled by zone, some are not\n            delegate && delegate.apply(self, args);\n        });\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction patchCallbacks(api, target, targetName, method, callbacks) {\n    const symbol = Zone.__symbol__(method);\n    if (target[symbol]) {\n        return;\n    }\n    const nativeDelegate = target[symbol] = target[method];\n    target[method] = function (name, opts, options) {\n        if (opts && opts.prototype) {\n            callbacks.forEach(function (callback) {\n                const source = `${targetName}.${method}::` + callback;\n                const prototype = opts.prototype;\n                if (prototype.hasOwnProperty(callback)) {\n                    const descriptor = api.ObjectGetOwnPropertyDescriptor(prototype, callback);\n                    if (descriptor && descriptor.value) {\n                        descriptor.value = api.wrapWithCurrentZone(descriptor.value, source);\n                        api._redefineProperty(opts.prototype, callback, descriptor);\n                    }\n                    else if (prototype[callback]) {\n                        prototype[callback] = api.wrapWithCurrentZone(prototype[callback], source);\n                    }\n                }\n                else if (prototype[callback]) {\n                    prototype[callback] = api.wrapWithCurrentZone(prototype[callback], source);\n                }\n            });\n        }\n        return nativeDelegate.call(target, name, opts, options);\n    };\n    api.attachOriginToPatched(target[method], nativeDelegate);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/*\n * This is necessary for Chrome and Chrome mobile, to enable\n * things like redefining `createdCallback` on an element.\n */\nconst zoneSymbol$1 = Zone.__symbol__;\nconst _defineProperty = Object[zoneSymbol$1('defineProperty')] = Object.defineProperty;\nconst _getOwnPropertyDescriptor = Object[zoneSymbol$1('getOwnPropertyDescriptor')] =\n    Object.getOwnPropertyDescriptor;\nconst _create = Object.create;\nconst unconfigurablesKey = zoneSymbol$1('unconfigurables');\nfunction propertyPatch() {\n    Object.defineProperty = function (obj, prop, desc) {\n        if (isUnconfigurable(obj, prop)) {\n            throw new TypeError('Cannot assign to read only property \\'' + prop + '\\' of ' + obj);\n        }\n        const originalConfigurableFlag = desc.configurable;\n        if (prop !== 'prototype') {\n            desc = rewriteDescriptor(obj, prop, desc);\n        }\n        return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);\n    };\n    Object.defineProperties = function (obj, props) {\n        Object.keys(props).forEach(function (prop) {\n            Object.defineProperty(obj, prop, props[prop]);\n        });\n        return obj;\n    };\n    Object.create = function (obj, proto) {\n        if (typeof proto === 'object' && !Object.isFrozen(proto)) {\n            Object.keys(proto).forEach(function (prop) {\n                proto[prop] = rewriteDescriptor(obj, prop, proto[prop]);\n            });\n        }\n        return _create(obj, proto);\n    };\n    Object.getOwnPropertyDescriptor = function (obj, prop) {\n        const desc = _getOwnPropertyDescriptor(obj, prop);\n        if (desc && isUnconfigurable(obj, prop)) {\n            desc.configurable = false;\n        }\n        return desc;\n    };\n}\nfunction _redefineProperty(obj, prop, desc) {\n    const originalConfigurableFlag = desc.configurable;\n    desc = rewriteDescriptor(obj, prop, desc);\n    return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);\n}\nfunction isUnconfigurable(obj, prop) {\n    return obj && obj[unconfigurablesKey] && obj[unconfigurablesKey][prop];\n}\nfunction rewriteDescriptor(obj, prop, desc) {\n    // issue-927, if the desc is frozen, don't try to change the desc\n    if (!Object.isFrozen(desc)) {\n        desc.configurable = true;\n    }\n    if (!desc.configurable) {\n        // issue-927, if the obj is frozen, don't try to set the desc to obj\n        if (!obj[unconfigurablesKey] && !Object.isFrozen(obj)) {\n            _defineProperty(obj, unconfigurablesKey, { writable: true, value: {} });\n        }\n        if (obj[unconfigurablesKey]) {\n            obj[unconfigurablesKey][prop] = true;\n        }\n    }\n    return desc;\n}\nfunction _tryDefineProperty(obj, prop, desc, originalConfigurableFlag) {\n    try {\n        return _defineProperty(obj, prop, desc);\n    }\n    catch (error) {\n        if (desc.configurable) {\n            // In case of errors, when the configurable flag was likely set by rewriteDescriptor(), let's\n            // retry with the original flag value\n            if (typeof originalConfigurableFlag == 'undefined') {\n                delete desc.configurable;\n            }\n            else {\n                desc.configurable = originalConfigurableFlag;\n            }\n            try {\n                return _defineProperty(obj, prop, desc);\n            }\n            catch (error) {\n                let descJson = null;\n                try {\n                    descJson = JSON.stringify(desc);\n                }\n                catch (error) {\n                    descJson = desc.toString();\n                }\n                console.log(`Attempting to configure '${prop}' with descriptor '${descJson}' on object '${obj}' and got error, giving up: ${error}`);\n            }\n        }\n        else {\n            throw error;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @fileoverview\n * @suppress {globalThis}\n */\nconst globalEventHandlersEventNames = [\n    'abort',\n    'animationcancel',\n    'animationend',\n    'animationiteration',\n    'auxclick',\n    'beforeinput',\n    'blur',\n    'cancel',\n    'canplay',\n    'canplaythrough',\n    'change',\n    'compositionstart',\n    'compositionupdate',\n    'compositionend',\n    'cuechange',\n    'click',\n    'close',\n    'contextmenu',\n    'curechange',\n    'dblclick',\n    'drag',\n    'dragend',\n    'dragenter',\n    'dragexit',\n    'dragleave',\n    'dragover',\n    'drop',\n    'durationchange',\n    'emptied',\n    'ended',\n    'error',\n    'focus',\n    'focusin',\n    'focusout',\n    'gotpointercapture',\n    'input',\n    'invalid',\n    'keydown',\n    'keypress',\n    'keyup',\n    'load',\n    'loadstart',\n    'loadeddata',\n    'loadedmetadata',\n    'lostpointercapture',\n    'mousedown',\n    'mouseenter',\n    'mouseleave',\n    'mousemove',\n    'mouseout',\n    'mouseover',\n    'mouseup',\n    'mousewheel',\n    'orientationchange',\n    'pause',\n    'play',\n    'playing',\n    'pointercancel',\n    'pointerdown',\n    'pointerenter',\n    'pointerleave',\n    'pointerlockchange',\n    'mozpointerlockchange',\n    'webkitpointerlockerchange',\n    'pointerlockerror',\n    'mozpointerlockerror',\n    'webkitpointerlockerror',\n    'pointermove',\n    'pointout',\n    'pointerover',\n    'pointerup',\n    'progress',\n    'ratechange',\n    'reset',\n    'resize',\n    'scroll',\n    'seeked',\n    'seeking',\n    'select',\n    'selectionchange',\n    'selectstart',\n    'show',\n    'sort',\n    'stalled',\n    'submit',\n    'suspend',\n    'timeupdate',\n    'volumechange',\n    'touchcancel',\n    'touchmove',\n    'touchstart',\n    'touchend',\n    'transitioncancel',\n    'transitionend',\n    'waiting',\n    'wheel'\n];\nconst documentEventNames = [\n    'afterscriptexecute', 'beforescriptexecute', 'DOMContentLoaded', 'freeze', 'fullscreenchange',\n    'mozfullscreenchange', 'webkitfullscreenchange', 'msfullscreenchange', 'fullscreenerror',\n    'mozfullscreenerror', 'webkitfullscreenerror', 'msfullscreenerror', 'readystatechange',\n    'visibilitychange', 'resume'\n];\nconst windowEventNames = [\n    'absolutedeviceorientation',\n    'afterinput',\n    'afterprint',\n    'appinstalled',\n    'beforeinstallprompt',\n    'beforeprint',\n    'beforeunload',\n    'devicelight',\n    'devicemotion',\n    'deviceorientation',\n    'deviceorientationabsolute',\n    'deviceproximity',\n    'hashchange',\n    'languagechange',\n    'message',\n    'mozbeforepaint',\n    'offline',\n    'online',\n    'paint',\n    'pageshow',\n    'pagehide',\n    'popstate',\n    'rejectionhandled',\n    'storage',\n    'unhandledrejection',\n    'unload',\n    'userproximity',\n    'vrdisplyconnected',\n    'vrdisplaydisconnected',\n    'vrdisplaypresentchange'\n];\nconst htmlElementEventNames = [\n    'beforecopy', 'beforecut', 'beforepaste', 'copy', 'cut', 'paste', 'dragstart', 'loadend',\n    'animationstart', 'search', 'transitionrun', 'transitionstart', 'webkitanimationend',\n    'webkitanimationiteration', 'webkitanimationstart', 'webkittransitionend'\n];\nconst mediaElementEventNames = ['encrypted', 'waitingforkey', 'msneedkey', 'mozinterruptbegin', 'mozinterruptend'];\nconst ieElementEventNames = [\n    'activate',\n    'afterupdate',\n    'ariarequest',\n    'beforeactivate',\n    'beforedeactivate',\n    'beforeeditfocus',\n    'beforeupdate',\n    'cellchange',\n    'controlselect',\n    'dataavailable',\n    'datasetchanged',\n    'datasetcomplete',\n    'errorupdate',\n    'filterchange',\n    'layoutcomplete',\n    'losecapture',\n    'move',\n    'moveend',\n    'movestart',\n    'propertychange',\n    'resizeend',\n    'resizestart',\n    'rowenter',\n    'rowexit',\n    'rowsdelete',\n    'rowsinserted',\n    'command',\n    'compassneedscalibration',\n    'deactivate',\n    'help',\n    'mscontentzoom',\n    'msmanipulationstatechanged',\n    'msgesturechange',\n    'msgesturedoubletap',\n    'msgestureend',\n    'msgesturehold',\n    'msgesturestart',\n    'msgesturetap',\n    'msgotpointercapture',\n    'msinertiastart',\n    'mslostpointercapture',\n    'mspointercancel',\n    'mspointerdown',\n    'mspointerenter',\n    'mspointerhover',\n    'mspointerleave',\n    'mspointermove',\n    'mspointerout',\n    'mspointerover',\n    'mspointerup',\n    'pointerout',\n    'mssitemodejumplistitemremoved',\n    'msthumbnailclick',\n    'stop',\n    'storagecommit'\n];\nconst webglEventNames = ['webglcontextrestored', 'webglcontextlost', 'webglcontextcreationerror'];\nconst formEventNames = ['autocomplete', 'autocompleteerror'];\nconst detailEventNames = ['toggle'];\nconst frameEventNames = ['load'];\nconst frameSetEventNames = ['blur', 'error', 'focus', 'load', 'resize', 'scroll', 'messageerror'];\nconst marqueeEventNames = ['bounce', 'finish', 'start'];\nconst XMLHttpRequestEventNames = [\n    'loadstart', 'progress', 'abort', 'error', 'load', 'progress', 'timeout', 'loadend',\n    'readystatechange'\n];\nconst IDBIndexEventNames = ['upgradeneeded', 'complete', 'abort', 'success', 'error', 'blocked', 'versionchange', 'close'];\nconst websocketEventNames = ['close', 'error', 'open', 'message'];\nconst workerEventNames = ['error', 'message'];\nconst eventNames = globalEventHandlersEventNames.concat(webglEventNames, formEventNames, detailEventNames, documentEventNames, windowEventNames, htmlElementEventNames, ieElementEventNames);\nfunction filterProperties(target, onProperties, ignoreProperties) {\n    if (!ignoreProperties || ignoreProperties.length === 0) {\n        return onProperties;\n    }\n    const tip = ignoreProperties.filter(ip => ip.target === target);\n    if (!tip || tip.length === 0) {\n        return onProperties;\n    }\n    const targetIgnoreProperties = tip[0].ignoreProperties;\n    return onProperties.filter(op => targetIgnoreProperties.indexOf(op) === -1);\n}\nfunction patchFilteredProperties(target, onProperties, ignoreProperties, prototype) {\n    // check whether target is available, sometimes target will be undefined\n    // because different browser or some 3rd party plugin.\n    if (!target) {\n        return;\n    }\n    const filteredProperties = filterProperties(target, onProperties, ignoreProperties);\n    patchOnProperties(target, filteredProperties, prototype);\n}\nfunction propertyDescriptorPatch(api, _global) {\n    if (isNode && !isMix) {\n        return;\n    }\n    if (Zone[api.symbol('patchEvents')]) {\n        // events are already been patched by legacy patch.\n        return;\n    }\n    const supportsWebSocket = typeof WebSocket !== 'undefined';\n    const ignoreProperties = _global['__Zone_ignore_on_properties'];\n    // for browsers that we can patch the descriptor:  Chrome & Firefox\n    if (isBrowser) {\n        const internalWindow = window;\n        const ignoreErrorProperties = isIE ? [{ target: internalWindow, ignoreProperties: ['error'] }] : [];\n        // in IE/Edge, onProp not exist in window object, but in WindowPrototype\n        // so we need to pass WindowPrototype to check onProp exist or not\n        patchFilteredProperties(internalWindow, eventNames.concat(['messageerror']), ignoreProperties ? ignoreProperties.concat(ignoreErrorProperties) : ignoreProperties, ObjectGetPrototypeOf(internalWindow));\n        patchFilteredProperties(Document.prototype, eventNames, ignoreProperties);\n        if (typeof internalWindow['SVGElement'] !== 'undefined') {\n            patchFilteredProperties(internalWindow['SVGElement'].prototype, eventNames, ignoreProperties);\n        }\n        patchFilteredProperties(Element.prototype, eventNames, ignoreProperties);\n        patchFilteredProperties(HTMLElement.prototype, eventNames, ignoreProperties);\n        patchFilteredProperties(HTMLMediaElement.prototype, mediaElementEventNames, ignoreProperties);\n        patchFilteredProperties(HTMLFrameSetElement.prototype, windowEventNames.concat(frameSetEventNames), ignoreProperties);\n        patchFilteredProperties(HTMLBodyElement.prototype, windowEventNames.concat(frameSetEventNames), ignoreProperties);\n        patchFilteredProperties(HTMLFrameElement.prototype, frameEventNames, ignoreProperties);\n        patchFilteredProperties(HTMLIFrameElement.prototype, frameEventNames, ignoreProperties);\n        const HTMLMarqueeElement = internalWindow['HTMLMarqueeElement'];\n        if (HTMLMarqueeElement) {\n            patchFilteredProperties(HTMLMarqueeElement.prototype, marqueeEventNames, ignoreProperties);\n        }\n        const Worker = internalWindow['Worker'];\n        if (Worker) {\n            patchFilteredProperties(Worker.prototype, workerEventNames, ignoreProperties);\n        }\n    }\n    const XMLHttpRequest = _global['XMLHttpRequest'];\n    if (XMLHttpRequest) {\n        // XMLHttpRequest is not available in ServiceWorker, so we need to check here\n        patchFilteredProperties(XMLHttpRequest.prototype, XMLHttpRequestEventNames, ignoreProperties);\n    }\n    const XMLHttpRequestEventTarget = _global['XMLHttpRequestEventTarget'];\n    if (XMLHttpRequestEventTarget) {\n        patchFilteredProperties(XMLHttpRequestEventTarget && XMLHttpRequestEventTarget.prototype, XMLHttpRequestEventNames, ignoreProperties);\n    }\n    if (typeof IDBIndex !== 'undefined') {\n        patchFilteredProperties(IDBIndex.prototype, IDBIndexEventNames, ignoreProperties);\n        patchFilteredProperties(IDBRequest.prototype, IDBIndexEventNames, ignoreProperties);\n        patchFilteredProperties(IDBOpenDBRequest.prototype, IDBIndexEventNames, ignoreProperties);\n        patchFilteredProperties(IDBDatabase.prototype, IDBIndexEventNames, ignoreProperties);\n        patchFilteredProperties(IDBTransaction.prototype, IDBIndexEventNames, ignoreProperties);\n        patchFilteredProperties(IDBCursor.prototype, IDBIndexEventNames, ignoreProperties);\n    }\n    if (supportsWebSocket) {\n        patchFilteredProperties(WebSocket.prototype, websocketEventNames, ignoreProperties);\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nZone.__load_patch('util', (global, Zone, api) => {\n    api.patchOnProperties = patchOnProperties;\n    api.patchMethod = patchMethod;\n    api.bindArguments = bindArguments;\n    api.patchMacroTask = patchMacroTask;\n    // In earlier version of zone.js (<0.9.0), we use env name `__zone_symbol__BLACK_LISTED_EVENTS` to\n    // define which events will not be patched by `Zone.js`.\n    // In newer version (>=0.9.0), we change the env name to `__zone_symbol__UNPATCHED_EVENTS` to keep\n    // the name consistent with angular repo.\n    // The  `__zone_symbol__BLACK_LISTED_EVENTS` is deprecated, but it is still be supported for\n    // backwards compatibility.\n    const SYMBOL_BLACK_LISTED_EVENTS = Zone.__symbol__('BLACK_LISTED_EVENTS');\n    const SYMBOL_UNPATCHED_EVENTS = Zone.__symbol__('UNPATCHED_EVENTS');\n    if (global[SYMBOL_UNPATCHED_EVENTS]) {\n        global[SYMBOL_BLACK_LISTED_EVENTS] = global[SYMBOL_UNPATCHED_EVENTS];\n    }\n    if (global[SYMBOL_BLACK_LISTED_EVENTS]) {\n        Zone[SYMBOL_BLACK_LISTED_EVENTS] = Zone[SYMBOL_UNPATCHED_EVENTS] =\n            global[SYMBOL_BLACK_LISTED_EVENTS];\n    }\n    api.patchEventPrototype = patchEventPrototype;\n    api.patchEventTarget = patchEventTarget;\n    api.isIEOrEdge = isIEOrEdge;\n    api.ObjectDefineProperty = ObjectDefineProperty;\n    api.ObjectGetOwnPropertyDescriptor = ObjectGetOwnPropertyDescriptor;\n    api.ObjectCreate = ObjectCreate;\n    api.ArraySlice = ArraySlice;\n    api.patchClass = patchClass;\n    api.wrapWithCurrentZone = wrapWithCurrentZone;\n    api.filterProperties = filterProperties;\n    api.attachOriginToPatched = attachOriginToPatched;\n    api._redefineProperty = _redefineProperty;\n    api.patchCallbacks = patchCallbacks;\n    api.getGlobalObjects = () => ({\n        globalSources,\n        zoneSymbolEventNames: zoneSymbolEventNames$1,\n        eventNames,\n        isBrowser,\n        isMix,\n        isNode,\n        TRUE_STR,\n        FALSE_STR,\n        ZONE_SYMBOL_PREFIX,\n        ADD_EVENT_LISTENER_STR,\n        REMOVE_EVENT_LISTENER_STR\n    });\n});\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @fileoverview\n * @suppress {missingRequire}\n */\nconst taskSymbol = zoneSymbol('zoneTask');\nfunction patchTimer(window, setName, cancelName, nameSuffix) {\n    let setNative = null;\n    let clearNative = null;\n    setName += nameSuffix;\n    cancelName += nameSuffix;\n    const tasksByHandleId = {};\n    function scheduleTask(task) {\n        const data = task.data;\n        function timer() {\n            try {\n                task.invoke.apply(this, arguments);\n            }\n            finally {\n                // issue-934, task will be cancelled\n                // even it is a periodic task such as\n                // setInterval\n                if (!(task.data && task.data.isPeriodic)) {\n                    if (typeof data.handleId === 'number') {\n                        // in non-nodejs env, we remove timerId\n                        // from local cache\n                        delete tasksByHandleId[data.handleId];\n                    }\n                    else if (data.handleId) {\n                        // Node returns complex objects as handleIds\n                        // we remove task reference from timer object\n                        data.handleId[taskSymbol] = null;\n                    }\n                }\n            }\n        }\n        data.args[0] = timer;\n        data.handleId = setNative.apply(window, data.args);\n        return task;\n    }\n    function clearTask(task) {\n        return clearNative(task.data.handleId);\n    }\n    setNative =\n        patchMethod(window, setName, (delegate) => function (self, args) {\n            if (typeof args[0] === 'function') {\n                const options = {\n                    isPeriodic: nameSuffix === 'Interval',\n                    delay: (nameSuffix === 'Timeout' || nameSuffix === 'Interval') ? args[1] || 0 :\n                        undefined,\n                    args: args\n                };\n                const task = scheduleMacroTaskWithCurrentZone(setName, args[0], options, scheduleTask, clearTask);\n                if (!task) {\n                    return task;\n                }\n                // Node.js must additionally support the ref and unref functions.\n                const handle = task.data.handleId;\n                if (typeof handle === 'number') {\n                    // for non nodejs env, we save handleId: task\n                    // mapping in local cache for clearTimeout\n                    tasksByHandleId[handle] = task;\n                }\n                else if (handle) {\n                    // for nodejs env, we save task\n                    // reference in timerId Object for clearTimeout\n                    handle[taskSymbol] = task;\n                }\n                // check whether handle is null, because some polyfill or browser\n                // may return undefined from setTimeout/setInterval/setImmediate/requestAnimationFrame\n                if (handle && handle.ref && handle.unref && typeof handle.ref === 'function' &&\n                    typeof handle.unref === 'function') {\n                    task.ref = handle.ref.bind(handle);\n                    task.unref = handle.unref.bind(handle);\n                }\n                if (typeof handle === 'number' || handle) {\n                    return handle;\n                }\n                return task;\n            }\n            else {\n                // cause an error by calling it directly.\n                return delegate.apply(window, args);\n            }\n        });\n    clearNative =\n        patchMethod(window, cancelName, (delegate) => function (self, args) {\n            const id = args[0];\n            let task;\n            if (typeof id === 'number') {\n                // non nodejs env.\n                task = tasksByHandleId[id];\n            }\n            else {\n                // nodejs env.\n                task = id && id[taskSymbol];\n                // other environments.\n                if (!task) {\n                    task = id;\n                }\n            }\n            if (task && typeof task.type === 'string') {\n                if (task.state !== 'notScheduled' &&\n                    (task.cancelFn && task.data.isPeriodic || task.runCount === 0)) {\n                    if (typeof id === 'number') {\n                        delete tasksByHandleId[id];\n                    }\n                    else if (id) {\n                        id[taskSymbol] = null;\n                    }\n                    // Do not cancel already canceled functions\n                    task.zone.cancelTask(task);\n                }\n            }\n            else {\n                // cause an error by calling it directly.\n                delegate.apply(window, args);\n            }\n        });\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction patchCustomElements(_global, api) {\n    const { isBrowser, isMix } = api.getGlobalObjects();\n    if ((!isBrowser && !isMix) || !_global['customElements'] || !('customElements' in _global)) {\n        return;\n    }\n    const callbacks = ['connectedCallback', 'disconnectedCallback', 'adoptedCallback', 'attributeChangedCallback'];\n    api.patchCallbacks(api, _global.customElements, 'customElements', 'define', callbacks);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction eventTargetPatch(_global, api) {\n    if (Zone[api.symbol('patchEventTarget')]) {\n        // EventTarget is already patched.\n        return;\n    }\n    const { eventNames, zoneSymbolEventNames, TRUE_STR, FALSE_STR, ZONE_SYMBOL_PREFIX } = api.getGlobalObjects();\n    //  predefine all __zone_symbol__ + eventName + true/false string\n    for (let i = 0; i < eventNames.length; i++) {\n        const eventName = eventNames[i];\n        const falseEventName = eventName + FALSE_STR;\n        const trueEventName = eventName + TRUE_STR;\n        const symbol = ZONE_SYMBOL_PREFIX + falseEventName;\n        const symbolCapture = ZONE_SYMBOL_PREFIX + trueEventName;\n        zoneSymbolEventNames[eventName] = {};\n        zoneSymbolEventNames[eventName][FALSE_STR] = symbol;\n        zoneSymbolEventNames[eventName][TRUE_STR] = symbolCapture;\n    }\n    const EVENT_TARGET = _global['EventTarget'];\n    if (!EVENT_TARGET || !EVENT_TARGET.prototype) {\n        return;\n    }\n    api.patchEventTarget(_global, [EVENT_TARGET && EVENT_TARGET.prototype]);\n    return true;\n}\nfunction patchEvent(global, api) {\n    api.patchEventPrototype(global, api);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @fileoverview\n * @suppress {missingRequire}\n */\nZone.__load_patch('legacy', (global) => {\n    const legacyPatch = global[Zone.__symbol__('legacyPatch')];\n    if (legacyPatch) {\n        legacyPatch();\n    }\n});\nZone.__load_patch('timers', (global) => {\n    const set = 'set';\n    const clear = 'clear';\n    patchTimer(global, set, clear, 'Timeout');\n    patchTimer(global, set, clear, 'Interval');\n    patchTimer(global, set, clear, 'Immediate');\n});\nZone.__load_patch('requestAnimationFrame', (global) => {\n    patchTimer(global, 'request', 'cancel', 'AnimationFrame');\n    patchTimer(global, 'mozRequest', 'mozCancel', 'AnimationFrame');\n    patchTimer(global, 'webkitRequest', 'webkitCancel', 'AnimationFrame');\n});\nZone.__load_patch('blocking', (global, Zone) => {\n    const blockingMethods = ['alert', 'prompt', 'confirm'];\n    for (let i = 0; i < blockingMethods.length; i++) {\n        const name = blockingMethods[i];\n        patchMethod(global, name, (delegate, symbol, name) => {\n            return function (s, args) {\n                return Zone.current.run(delegate, global, args, name);\n            };\n        });\n    }\n});\nZone.__load_patch('EventTarget', (global, Zone, api) => {\n    patchEvent(global, api);\n    eventTargetPatch(global, api);\n    // patch XMLHttpRequestEventTarget's addEventListener/removeEventListener\n    const XMLHttpRequestEventTarget = global['XMLHttpRequestEventTarget'];\n    if (XMLHttpRequestEventTarget && XMLHttpRequestEventTarget.prototype) {\n        api.patchEventTarget(global, [XMLHttpRequestEventTarget.prototype]);\n    }\n    patchClass('MutationObserver');\n    patchClass('WebKitMutationObserver');\n    patchClass('IntersectionObserver');\n    patchClass('FileReader');\n});\nZone.__load_patch('on_property', (global, Zone, api) => {\n    propertyDescriptorPatch(api, global);\n    propertyPatch();\n});\nZone.__load_patch('customElements', (global, Zone, api) => {\n    patchCustomElements(global, api);\n});\nZone.__load_patch('XHR', (global, Zone) => {\n    // Treat XMLHttpRequest as a macrotask.\n    patchXHR(global);\n    const XHR_TASK = zoneSymbol('xhrTask');\n    const XHR_SYNC = zoneSymbol('xhrSync');\n    const XHR_LISTENER = zoneSymbol('xhrListener');\n    const XHR_SCHEDULED = zoneSymbol('xhrScheduled');\n    const XHR_URL = zoneSymbol('xhrURL');\n    const XHR_ERROR_BEFORE_SCHEDULED = zoneSymbol('xhrErrorBeforeScheduled');\n    function patchXHR(window) {\n        const XMLHttpRequest = window['XMLHttpRequest'];\n        if (!XMLHttpRequest) {\n            // XMLHttpRequest is not available in service worker\n            return;\n        }\n        const XMLHttpRequestPrototype = XMLHttpRequest.prototype;\n        function findPendingTask(target) {\n            return target[XHR_TASK];\n        }\n        let oriAddListener = XMLHttpRequestPrototype[ZONE_SYMBOL_ADD_EVENT_LISTENER];\n        let oriRemoveListener = XMLHttpRequestPrototype[ZONE_SYMBOL_REMOVE_EVENT_LISTENER];\n        if (!oriAddListener) {\n            const XMLHttpRequestEventTarget = window['XMLHttpRequestEventTarget'];\n            if (XMLHttpRequestEventTarget) {\n                const XMLHttpRequestEventTargetPrototype = XMLHttpRequestEventTarget.prototype;\n                oriAddListener = XMLHttpRequestEventTargetPrototype[ZONE_SYMBOL_ADD_EVENT_LISTENER];\n                oriRemoveListener = XMLHttpRequestEventTargetPrototype[ZONE_SYMBOL_REMOVE_EVENT_LISTENER];\n            }\n        }\n        const READY_STATE_CHANGE = 'readystatechange';\n        const SCHEDULED = 'scheduled';\n        function scheduleTask(task) {\n            const data = task.data;\n            const target = data.target;\n            target[XHR_SCHEDULED] = false;\n            target[XHR_ERROR_BEFORE_SCHEDULED] = false;\n            // remove existing event listener\n            const listener = target[XHR_LISTENER];\n            if (!oriAddListener) {\n                oriAddListener = target[ZONE_SYMBOL_ADD_EVENT_LISTENER];\n                oriRemoveListener = target[ZONE_SYMBOL_REMOVE_EVENT_LISTENER];\n            }\n            if (listener) {\n                oriRemoveListener.call(target, READY_STATE_CHANGE, listener);\n            }\n            const newListener = target[XHR_LISTENER] = () => {\n                if (target.readyState === target.DONE) {\n                    // sometimes on some browsers XMLHttpRequest will fire onreadystatechange with\n                    // readyState=4 multiple times, so we need to check task state here\n                    if (!data.aborted && target[XHR_SCHEDULED] && task.state === SCHEDULED) {\n                        // check whether the xhr has registered onload listener\n                        // if that is the case, the task should invoke after all\n                        // onload listeners finish.\n                        const loadTasks = target['__zone_symbol__loadfalse'];\n                        if (loadTasks && loadTasks.length > 0) {\n                            const oriInvoke = task.invoke;\n                            task.invoke = function () {\n                                // need to load the tasks again, because in other\n                                // load listener, they may remove themselves\n                                const loadTasks = target['__zone_symbol__loadfalse'];\n                                for (let i = 0; i < loadTasks.length; i++) {\n                                    if (loadTasks[i] === task) {\n                                        loadTasks.splice(i, 1);\n                                    }\n                                }\n                                if (!data.aborted && task.state === SCHEDULED) {\n                                    oriInvoke.call(task);\n                                }\n                            };\n                            loadTasks.push(task);\n                        }\n                        else {\n                            task.invoke();\n                        }\n                    }\n                    else if (!data.aborted && target[XHR_SCHEDULED] === false) {\n                        // error occurs when xhr.send()\n                        target[XHR_ERROR_BEFORE_SCHEDULED] = true;\n                    }\n                }\n            };\n            oriAddListener.call(target, READY_STATE_CHANGE, newListener);\n            const storedTask = target[XHR_TASK];\n            if (!storedTask) {\n                target[XHR_TASK] = task;\n            }\n            sendNative.apply(target, data.args);\n            target[XHR_SCHEDULED] = true;\n            return task;\n        }\n        function placeholderCallback() { }\n        function clearTask(task) {\n            const data = task.data;\n            // Note - ideally, we would call data.target.removeEventListener here, but it's too late\n            // to prevent it from firing. So instead, we store info for the event listener.\n            data.aborted = true;\n            return abortNative.apply(data.target, data.args);\n        }\n        const openNative = patchMethod(XMLHttpRequestPrototype, 'open', () => function (self, args) {\n            self[XHR_SYNC] = args[2] == false;\n            self[XHR_URL] = args[1];\n            return openNative.apply(self, args);\n        });\n        const XMLHTTPREQUEST_SOURCE = 'XMLHttpRequest.send';\n        const fetchTaskAborting = zoneSymbol('fetchTaskAborting');\n        const fetchTaskScheduling = zoneSymbol('fetchTaskScheduling');\n        const sendNative = patchMethod(XMLHttpRequestPrototype, 'send', () => function (self, args) {\n            if (Zone.current[fetchTaskScheduling] === true) {\n                // a fetch is scheduling, so we are using xhr to polyfill fetch\n                // and because we already schedule macroTask for fetch, we should\n                // not schedule a macroTask for xhr again\n                return sendNative.apply(self, args);\n            }\n            if (self[XHR_SYNC]) {\n                // if the XHR is sync there is no task to schedule, just execute the code.\n                return sendNative.apply(self, args);\n            }\n            else {\n                const options = { target: self, url: self[XHR_URL], isPeriodic: false, args: args, aborted: false };\n                const task = scheduleMacroTaskWithCurrentZone(XMLHTTPREQUEST_SOURCE, placeholderCallback, options, scheduleTask, clearTask);\n                if (self && self[XHR_ERROR_BEFORE_SCHEDULED] === true && !options.aborted &&\n                    task.state === SCHEDULED) {\n                    // xhr request throw error when send\n                    // we should invoke task instead of leaving a scheduled\n                    // pending macroTask\n                    task.invoke();\n                }\n            }\n        });\n        const abortNative = patchMethod(XMLHttpRequestPrototype, 'abort', () => function (self, args) {\n            const task = findPendingTask(self);\n            if (task && typeof task.type == 'string') {\n                // If the XHR has already completed, do nothing.\n                // If the XHR has already been aborted, do nothing.\n                // Fix #569, call abort multiple times before done will cause\n                // macroTask task count be negative number\n                if (task.cancelFn == null || (task.data && task.data.aborted)) {\n                    return;\n                }\n                task.zone.cancelTask(task);\n            }\n            else if (Zone.current[fetchTaskAborting] === true) {\n                // the abort is called from fetch polyfill, we need to call native abort of XHR.\n                return abortNative.apply(self, args);\n            }\n            // Otherwise, we are trying to abort an XHR which has not yet been sent, so there is no\n            // task\n            // to cancel. Do nothing.\n        });\n    }\n});\nZone.__load_patch('geolocation', (global) => {\n    /// GEO_LOCATION\n    if (global['navigator'] && global['navigator'].geolocation) {\n        patchPrototype(global['navigator'].geolocation, ['getCurrentPosition', 'watchPosition']);\n    }\n});\nZone.__load_patch('PromiseRejectionEvent', (global, Zone) => {\n    // handle unhandled promise rejection\n    function findPromiseRejectionHandler(evtName) {\n        return function (e) {\n            const eventTasks = findEventTasks(global, evtName);\n            eventTasks.forEach(eventTask => {\n                // windows has added unhandledrejection event listener\n                // trigger the event listener\n                const PromiseRejectionEvent = global['PromiseRejectionEvent'];\n                if (PromiseRejectionEvent) {\n                    const evt = new PromiseRejectionEvent(evtName, { promise: e.promise, reason: e.rejection });\n                    eventTask.invoke(evt);\n                }\n            });\n        };\n    }\n    if (global['PromiseRejectionEvent']) {\n        Zone[zoneSymbol('unhandledPromiseRejectionHandler')] =\n            findPromiseRejectionHandler('unhandledrejection');\n        Zone[zoneSymbol('rejectionHandledHandler')] =\n            findPromiseRejectionHandler('rejectionhandled');\n    }\n});\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n"],"sourceRoot":""}